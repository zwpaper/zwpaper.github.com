<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Go on zwPapEr</title>
    <link>https://page.codespaper.com/tags/go/</link>
    <description>Recent content in Go on zwPapEr</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 01 Mar 2020 00:00:00 +0800</lastBuildDate>
    
	<atom:link href="https://page.codespaper.com/tags/go/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Golang 1.14 发布，抢占式调度优化</title>
      <link>https://page.codespaper.com/2020/go14-preemptible/</link>
      <pubDate>Sun, 01 Mar 2020 00:00:00 +0800</pubDate>
      
      <guid>https://page.codespaper.com/2020/go14-preemptible/</guid>
      <description>Golang 1.14 发布 Golang 1.14 在 2020-02-25 正式发布，看了一下 Release Notes，发现有两个点比较有意思：
 调度器抢占优化，不再需要函数调用作为抢占点 Timer 更高效  这篇文章主要是聊聊调度器这部分。
调度器抢占优化 Golang 主打高并发，调度器自然也是关注的重点，以前一致有一个毛病， 如果一个 Goroutine 没有调用其他函数，就会一直占用当前的 Process，无法被调度走。
Golang 1.14 解决了这个问题。
实例程序 package main import ( &amp;#34;fmt&amp;#34; &amp;#34;runtime&amp;#34; ) func main() { fmt.Println(runtime.GOMAXPROCS(1)) go func() { for { } }() runtime.Gosched() fmt.Println(&amp;#34;outside&amp;#34;) } GOMAXPROCS, NumCPU, Gosched 实例程序里用到了 3 个函数，都是 rintime 包里的。
GOMAXPROCS GOMAXPROCS 用于设置一个 Go 程序能够使用的操作系统线程数， 现在默认值等于 NumCPU ，默认尽可能地使用系统资源。
在 1.5 以前，Go 会默认把 GOMAXPROCS 设置成 1，不过应该没有人在用 1.</description>
    </item>
    
    <item>
      <title>为什么我觉得 Golang 更好</title>
      <link>https://page.codespaper.com/2019/why-golang/</link>
      <pubDate>Sun, 10 Mar 2019 00:00:00 +0800</pubDate>
      
      <guid>https://page.codespaper.com/2019/why-golang/</guid>
      <description>Less is exponentially more 读后感 最近看到 Rob Pike 在 2012 年写的一篇文章，Less is exponentially more
 如果你不知道 Rob Pike 是谁：Rob Pike
或者用一句话介绍，Golang 作者之一
 结合之前看到对于 Golang 编程思想的讨论，对这篇文章真是相见恨晚
从 C++ 到 Golang Golang 的前身是 Rob Pike 在 1980+ 年在贝尔实验室写的一门编程语言：Newsqueak， 在 2007 年的时候，C++标准委员会正在紧锣密鼓地准备 C++0x (现在的 C++11)， 作为一名在 Google 的 C++ 工程师 Rob Pike 自然也十分关注，可是也在这时候， Rob 觉得不应该把这么多的特性都放到一门语言里，同时也觉得在 Newsqueak 里有一些特性， 如果能用在开发里，会对服务器端的很多开发都会有帮助。
可是 C++ 庞大复杂的体系，要加一些比较不一样的特性已经不是一件易事，而且可能也不值得， 所以在 C++ 项目编译的时间里（编译一次要 45 分钟，还是在编译集群上！）Rob 就拉上了 Ken Thompson 和 Robert Griesemer 决定要做点事情，Golang 从此开始登上历史的舞台。</description>
    </item>
    
  </channel>
</rss>