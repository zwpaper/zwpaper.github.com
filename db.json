{"meta":{"version":1,"warehouse":"1.0.1"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1},{"_id":"themes/fexo/source/sass/styles.scss","path":"sass/styles.scss","modified":1},{"_id":"themes/fexo/source/js/zenscroll.js","path":"js/zenscroll.js","modified":1},{"_id":"themes/fexo/source/js/util.js","path":"js/util.js","modified":1},{"_id":"themes/fexo/source/js/scroll-spy.js","path":"js/scroll-spy.js","modified":1},{"_id":"themes/fexo/source/js/fastclick.js","path":"js/fastclick.js","modified":1},{"_id":"themes/fexo/source/js/bundle.js","path":"js/bundle.js","modified":1},{"_id":"themes/fexo/source/js/app.js","path":"js/app.js","modified":1},{"_id":"themes/fexo/source/images/avatar.jpg","path":"images/avatar.jpg","modified":1},{"_id":"themes/fexo/source/fonts/fontello.woff2","path":"fonts/fontello.woff2","modified":1},{"_id":"themes/fexo/source/fonts/fontello.woff","path":"fonts/fontello.woff","modified":1},{"_id":"themes/fexo/source/fonts/fontello.ttf","path":"fonts/fontello.ttf","modified":1},{"_id":"themes/fexo/source/fonts/fontello.svg","path":"fonts/fontello.svg","modified":1},{"_id":"themes/fexo/source/fonts/fontello.eot","path":"fonts/fontello.eot","modified":1},{"_id":"themes/fexo/source/fonts/calligraffitti-regular-webfont.woff2","path":"fonts/calligraffitti-regular-webfont.woff2","modified":1},{"_id":"themes/fexo/source/fonts/calligraffitti-regular-webfont.woff","path":"fonts/calligraffitti-regular-webfont.woff","modified":1},{"_id":"themes/fexo/source/fonts/calligraffitti-regular-webfont.ttf","path":"fonts/calligraffitti-regular-webfont.ttf","modified":1},{"_id":"themes/fexo/source/fonts/calligraffitti-regular-webfont.svg","path":"fonts/calligraffitti-regular-webfont.svg","modified":1},{"_id":"themes/fexo/source/fonts/calligraffitti-regular-webfont.eot","path":"fonts/calligraffitti-regular-webfont.eot","modified":1},{"_id":"themes/fexo/source/fonts/PoiretOne-Regular.woff","path":"fonts/PoiretOne-Regular.woff","modified":1},{"_id":"themes/fexo/source/fonts/PoiretOne-Regular.ttf","path":"fonts/PoiretOne-Regular.ttf","modified":1},{"_id":"themes/fexo/source/fonts/PoiretOne-Regular.svg","path":"fonts/PoiretOne-Regular.svg","modified":1},{"_id":"themes/fexo/source/fonts/PoiretOne-Regular.eot","path":"fonts/PoiretOne-Regular.eot","modified":1},{"_id":"themes/fexo/source/fonts/Lobster-Regular.woff","path":"fonts/Lobster-Regular.woff","modified":1},{"_id":"themes/fexo/source/fonts/Lobster-Regular.ttf","path":"fonts/Lobster-Regular.ttf","modified":1},{"_id":"themes/fexo/source/fonts/Lobster-Regular.svg","path":"fonts/Lobster-Regular.svg","modified":1},{"_id":"themes/fexo/source/fonts/Lobster-Regular.eot","path":"fonts/Lobster-Regular.eot","modified":1},{"_id":"themes/fexo/source/css/styles.css.map","path":"css/styles.css.map","modified":1},{"_id":"themes/fexo/source/css/styles.css","path":"css/styles.css","modified":1}],"Cache":[{"_id":"source/_posts/Unique-binary-search-tree.md","shasum":"8e35c69910555bf37f694047ff93a3522b35f09d","modified":1458134691000},{"_id":"source/_posts/baiduyun-fastdown.md","shasum":"0ec53c49053c4f825f492d10f0f1d92f021c32b0","modified":1458134691000},{"_id":"source/CNAME","shasum":"25df96460d85c84d230e88b39ddaf30101dbf2c4","modified":1458132715000},{"_id":"source/_posts/google-cpp-style.md","shasum":"ef4278cfd0cd217a26393f8d4c6fc9a0ad15e692","modified":1458134691000},{"_id":"source/_posts/hello-world.md","shasum":"91b17c2206a2b22bdfef0a150c26c6c825eb42d1","modified":1458134691000},{"_id":"source/_posts/increment-and-args-order.md","shasum":"bf04f8d12375a10791337fb569fc4be1341ce7ab","modified":1458134691000},{"_id":"source/_posts/recursive-symmetric-tree.md","shasum":"408accb722c9d80d1f4e5a2b02e43ffc62a03f9c","modified":1458134691000},{"_id":"source/_posts/subsets.md","shasum":"a7cf2b74bf10e1731ebea9cc9d8ba931fa7ee5c7","modified":1458134691000},{"_id":"source/_posts/validateBST.md","shasum":"53bd883e2309788e2e5bef46717fb8b2362670ef","modified":1458134691000},{"_id":"source/_posts/tesla-in-beijing.md","shasum":"6413715a1ae35ee4cfe69d0bd44b4c5975a55242","modified":1458134691000},{"_id":"source/_posts/sessions-control-hammerspoon-doc.md","shasum":"0c7705980e08f0db1bdd6d14e082b5f579484504","modified":1438747289000},{"_id":"themes/fexo/source/sass/pages/_tag.scss","shasum":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1461826040000},{"_id":"themes/fexo/LICENSE","shasum":"db4cb5aef6072a96721b5428fdd999647c049d55","modified":1461826040000},{"_id":"themes/fexo/README.md","shasum":"35cd346c229e17ed83609ee94b5d6493c4ab9982","modified":1461826040000},{"_id":"themes/fexo/_config.yml.bak","shasum":"6879d12ebd43a6e3e144476693a593bef66d53d1","modified":1461829766000},{"_id":"themes/fexo/_config.yml","shasum":"950098aaccb35aac567499301a13355861fd7b0e","modified":1461830793000},{"_id":"themes/fexo/gulpfile.js","shasum":"5995b9c4e8e18d1670ad30b2881d49fa17e56415","modified":1461826040000},{"_id":"themes/fexo/languages/default.yml","shasum":"fd7397be7789b43c1c163ab4faf106318811c2a8","modified":1461826040000},{"_id":"themes/fexo/languages/zh-TW.yml","shasum":"6141b4c7a094c74bd9df7c08908d92b561c1a0c0","modified":1461826040000},{"_id":"themes/fexo/languages/zh-CN.yml","shasum":"751c74830d5609969f1fd6e7fa933ecd5756117a","modified":1461826040000},{"_id":"themes/fexo/layout/_partial/article.ejs","shasum":"c56f02b3344586f984e742732323b809a941282a","modified":1461826040000},{"_id":"themes/fexo/languages/no.yml","shasum":"bf11017d77f64fbafb9c99ac219d076b20d53afc","modified":1461826040000},{"_id":"themes/fexo/layout/_partial/component/back-top.ejs","shasum":"47f2b8306b901f0fffc6aa0cfa40db697a0c5aff","modified":1461826040000},{"_id":"themes/fexo/layout/_partial/component/category-box.ejs","shasum":"497bb978e6bc81a79cd2dc80fa355d57335f0b81","modified":1461826040000},{"_id":"themes/fexo/layout/_partial/component/category.ejs","shasum":"2429158ff177b8876de765498b54d0c91b3fc551","modified":1461826040000},{"_id":"themes/fexo/layout/_partial/component/date.ejs","shasum":"163fbd874481cb9e2b6da5282701a3fbaa4e367a","modified":1461826040000},{"_id":"themes/fexo/layout/_partial/baidu-analytics.ejs","shasum":"c19e4abec19c23840fff7f8a51f4aefbb2b7e8ca","modified":1461826040000},{"_id":"themes/fexo/layout/_partial/component/disqus.ejs","shasum":"21de7498d235a52337335108fce7446e1a21ea1c","modified":1461826040000},{"_id":"themes/fexo/layout/_partial/component/comments.ejs","shasum":"49d044fc7bff2c6a249842b36c3739f01333109e","modified":1461826040000},{"_id":"themes/fexo/layout/_partial/component/item-category-name.ejs","shasum":"8ab52c9b5d5db1d3c1d343ecb405c4e15cd144ac","modified":1461826040000},{"_id":"themes/fexo/layout/_partial/component/item-tag.ejs","shasum":"1b4c4e090c33ccfd44b531a5de9af16eec266512","modified":1461826040000},{"_id":"themes/fexo/layout/_partial/component/item-post.ejs","shasum":"722e5dbde2d4683eea08f2af922358db45b253b1","modified":1461826040000},{"_id":"themes/fexo/layout/_partial/component/duoshuo.ejs","shasum":"a876cf39335d5ad935f01c31e87828b5115d0064","modified":1461826040000},{"_id":"themes/fexo/layout/_partial/component/item-year.ejs","shasum":"906a6aea44a30e83c4c4e449294c7e4d831c188e","modified":1461826040000},{"_id":"themes/fexo/layout/_partial/component/modal.ejs","shasum":"022291a0a5c872260b67b01a4aaa5de94978298c","modified":1461826040000},{"_id":"themes/fexo/layout/_partial/component/page-header.ejs","shasum":"14bad32082d87d7eeb45c0e9079e72f0ae65dbf4","modified":1461826040000},{"_id":"themes/fexo/layout/_partial/component/tag-box.ejs","shasum":"33467eb5c760502eb75dcad63a4527a1f68deb95","modified":1461826040000},{"_id":"themes/fexo/layout/_partial/component/tag-list.ejs","shasum":"8535c40b573744ced738b051383c0feca80eb0e9","modified":1461826040000},{"_id":"themes/fexo/layout/_partial/component/title.ejs","shasum":"6ab4c0769db4507d7fe1ffee1e69f988309309ff","modified":1461826040000},{"_id":"themes/fexo/layout/_partial/component/toc.ejs","shasum":"0efd5e3294bb883ff96270e69b05e289e4f17efe","modified":1461826040000},{"_id":"themes/fexo/layout/_partial/component/toolbox.ejs","shasum":"5a3a06aec68cc44df2e62bd66475dbf860792c30","modified":1461826040000},{"_id":"themes/fexo/layout/_partial/duoshuo.ejs","shasum":"728522a31887d5cc896104cc1b4c48b9d2659350","modified":1461826040000},{"_id":"themes/fexo/layout/_partial/google-analytics.ejs","shasum":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1461826040000},{"_id":"themes/fexo/layout/_partial/head.ejs","shasum":"aaee7fc7a120e9a45e91e95595dde85d770baf84","modified":1461826040000},{"_id":"themes/fexo/layout/_partial/home.ejs","shasum":"988b6b024125852eceac94df278cdeaa662c9d3d","modified":1461826040000},{"_id":"themes/fexo/layout/_partial/load-script.ejs","shasum":"4675c917548817118f4a3c5d84acc98d6c61a1d8","modified":1461826040000},{"_id":"themes/fexo/layout/_partial/style.ejs","shasum":"36821d37a7d3c339b1e1dd76cc3f0b20b854db2a","modified":1461826040000},{"_id":"themes/fexo/layout/_partial/component/pagination.ejs","shasum":"ffbb548aee6e15cae924ee7f922f28b2403e8e45","modified":1461826040000},{"_id":"themes/fexo/layout/about.ejs","shasum":"e8815233896c044cee92bfc16d20c4b9f5a00922","modified":1461826040000},{"_id":"themes/fexo/layout/archive.ejs","shasum":"f70a311fedda4468135aa5914954e9ecd0280a1d","modified":1461826040000},{"_id":"themes/fexo/layout/category.ejs","shasum":"b8c2c9baf4e21e4472b25a717ba61a5457ccddff","modified":1461826040000},{"_id":"themes/fexo/layout/index.ejs","shasum":"9d33cd03e7a8adf8bbc124c248def36c15e681d0","modified":1461826040000},{"_id":"themes/fexo/layout/layout.ejs","shasum":"12e188957db50359fa84958bed65fb4b71a840df","modified":1461826040000},{"_id":"themes/fexo/layout/link.ejs","shasum":"d2659cb6f1f796111a9261a90ccfe209294a0114","modified":1461826040000},{"_id":"themes/fexo/layout/post.ejs","shasum":"f709ada7f1fe62e1c46e5875a8b4e444490159e0","modified":1461826040000},{"_id":"themes/fexo/layout/project.ejs","shasum":"ce72621428276d54c15de0a4057144fc164ae5c1","modified":1461826040000},{"_id":"themes/fexo/layout/search.ejs","shasum":"1b1f99b55721d9178d712d4d3c4928322ba3c649","modified":1461826040000},{"_id":"themes/fexo/layout/tag.ejs","shasum":"03aaee19788f09dbb153b108a54aa4899aacd133","modified":1461826040000},{"_id":"themes/fexo/package.json","shasum":"351b5b21f5ea8851103ee1891248be43f3c27027","modified":1461826040000},{"_id":"themes/fexo/source/css/styles.css","shasum":"1a924da9b187d142259e45340543108ff28ad41f","modified":1461826040000},{"_id":"themes/fexo/source/fonts/PoiretOne-Regular.eot","shasum":"2a4ef0d00fb77d16e37c3da429698b029e7d2d2f","modified":1461826040000},{"_id":"themes/fexo/source/fonts/calligraffitti-regular-webfont.eot","shasum":"4c7bcece73621f648fa71d58fa13c28670fed8ca","modified":1461826040000},{"_id":"themes/fexo/source/fonts/PoiretOne-Regular.woff","shasum":"1cebcedde2c52261591bc322b176638798336a24","modified":1461826040000},{"_id":"themes/fexo/source/fonts/PoiretOne-Regular.ttf","shasum":"2b186ce205301f7f3abd441f0372b72adcd2aee3","modified":1461826040000},{"_id":"themes/fexo/source/fonts/calligraffitti-regular-webfont.woff","shasum":"1364845a3815740c572e29c83fd8d54f1c1ef5de","modified":1461826040000},{"_id":"themes/fexo/source/fonts/calligraffitti-regular-webfont.woff2","shasum":"ba50c427166090361b0dab4c72136c7b451e86d4","modified":1461826040000},{"_id":"themes/fexo/source/fonts/fontello.ttf","shasum":"e255d37ca14348e9a8532667a757ab552e58caff","modified":1461826040000},{"_id":"themes/fexo/source/fonts/fontello.eot","shasum":"7732065eeaec4614e9548955d9bd30ccd7b149c1","modified":1461826040000},{"_id":"themes/fexo/source/fonts/fontello.svg","shasum":"33a984f4482a5ba5e7bc67d82e8db63cda4e3ae1","modified":1461826040000},{"_id":"themes/fexo/source/fonts/fontello.woff","shasum":"45737fea847f3942ef405f00ea4df940fbb6bbd9","modified":1461826040000},{"_id":"themes/fexo/source/fonts/fontello.woff2","shasum":"1dfbc23328582f7cd9bcbe538224f6c762023e43","modified":1461826040000},{"_id":"themes/fexo/source/js/app.js","shasum":"a0cb31926910f6c237a388fa2a923c9d1b915872","modified":1461826040000},{"_id":"themes/fexo/source/images/avatar.jpg","shasum":"06b315b1cde634d2313044a83c40b1ac10961134","modified":1461826040000},{"_id":"themes/fexo/source/js/scroll-spy.js","shasum":"585463b49ec052d74f0af59385d53fbec42fc169","modified":1461826040000},{"_id":"themes/fexo/source/js/util.js","shasum":"8136da2bec1faf5fe3e14fa436f501292fca8c07","modified":1461826040000},{"_id":"themes/fexo/source/js/fastclick.js","shasum":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1461826040000},{"_id":"themes/fexo/source/sass/_base.scss","shasum":"915bc919ae434a61b58511720300eca8646b6705","modified":1461826040000},{"_id":"themes/fexo/source/sass/_animate.scss","shasum":"8de97c948cb4b9c9b7a87c0f7332ed534c378e26","modified":1461826040000},{"_id":"themes/fexo/source/js/zenscroll.js","shasum":"bea2a3571555fdae64e8fc56f161f9a4f427b335","modified":1461826040000},{"_id":"themes/fexo/source/js/bundle.js","shasum":"3296b9d0c7b943bb3957778c0ef0219c6fe78f43","modified":1461826040000},{"_id":"themes/fexo/source/sass/_fontello.scss","shasum":"f2d6b86bb63459884cf63e8c045fd10c827396eb","modified":1461826040000},{"_id":"themes/fexo/source/sass/_common.scss","shasum":"b1fc97d6d24a92a9a7a9d39be4fe844f5c0f6d44","modified":1461826040000},{"_id":"themes/fexo/source/sass/_highlight-js.scss","shasum":"38a5c4d9f3a2943aff9bde1d624d710587e3bc05","modified":1461826040000},{"_id":"themes/fexo/source/sass/_normalize.scss","shasum":"e58275a588bb631a37a2988145eea231ed23176b","modified":1461826040000},{"_id":"themes/fexo/source/sass/_fonts.scss","shasum":"10e188d379782ae2ee10427544919557036d0137","modified":1461826040000},{"_id":"themes/fexo/source/sass/_type.scss","shasum":"cc7a25654593030f5214d5adf85f12a954c373c5","modified":1461826040000},{"_id":"themes/fexo/source/sass/_variable.scss","shasum":"e403294d093f6b5294938619786a22fde3e7f848","modified":1461826040000},{"_id":"themes/fexo/source/sass/component/_back-top.scss","shasum":"1c67da7007f4b9d8c65deea3d82c0f579e65f2c2","modified":1461826040000},{"_id":"themes/fexo/source/sass/component/_category-box.scss","shasum":"a807145b74d1b98270ea19ae35edd25b4c448bfa","modified":1461826040000},{"_id":"themes/fexo/source/sass/component/_comments.scss","shasum":"3e9b61bc08f38f947f54e942986a19a7f95ce723","modified":1461826040000},{"_id":"themes/fexo/source/sass/component/_hint.scss","shasum":"2812b4e10313168f2e082b740c60d64a151d94c8","modified":1461826040000},{"_id":"themes/fexo/source/sass/component/_index.scss","shasum":"c54a109c130d9c0f01e199058a97ed99fd378b18","modified":1461826040000},{"_id":"themes/fexo/source/sass/component/_item-year.scss","shasum":"12c147dd4ab9587cd622083c86c2f6cf07d8e26a","modified":1461826040000},{"_id":"themes/fexo/source/sass/component/_item-title.scss","shasum":"cdaca2858abc9428ef01103a7fbea8f095d856aa","modified":1461826040000},{"_id":"themes/fexo/source/sass/component/_item-post.scss","shasum":"2f9d1dbf812316212ac454df4ca8330fe18eb94e","modified":1461826040000},{"_id":"themes/fexo/source/sass/component/_item-category-name.scss","shasum":"119840d160cd263b57e79e2099a81079d7eeee3d","modified":1461826040000},{"_id":"themes/fexo/source/sass/component/_modal.scss","shasum":"2f0ed96df388ec28445b1ce5c6a61a0a697f9a68","modified":1461826040000},{"_id":"themes/fexo/source/sass/component/_page-header.scss","shasum":"893d0595ef48323dce449ef0d17308ce02b36087","modified":1461826040000},{"_id":"themes/fexo/source/sass/component/_pagination.scss","shasum":"12c1880c518aee2e3ccf59661d01c308639f8a9e","modified":1461826040000},{"_id":"themes/fexo/source/sass/component/_list-post.scss","shasum":"43564f6443385bf34e15672d1477d1c7560f5563","modified":1461826040000},{"_id":"themes/fexo/source/sass/component/_table.scss","shasum":"4899fb31d1be8d5c9c397fcbcfc2ff0c5b2e7f7f","modified":1461826040000},{"_id":"themes/fexo/source/sass/component/_tag-box.scss","shasum":"7601951d09a75a7c39493bfa1b1da5ac989d9cda","modified":1461826040000},{"_id":"themes/fexo/source/sass/component/_toc.scss","shasum":"3b4c083cb2ba4a88ca35b6d8259ee991c83b3406","modified":1461826040000},{"_id":"themes/fexo/source/sass/component/_toolbox-mobile.scss","shasum":"f15b215b9bb103ee1773a01d8badd81bb7643710","modified":1461826040000},{"_id":"themes/fexo/source/sass/pages/_about.scss","shasum":"7d61e627ea5376390081e0b93db426ffc6c4dee8","modified":1461826040000},{"_id":"themes/fexo/source/sass/pages/_archive.scss","shasum":"fefd54282a42ebb68b711f1cfefa1f67abbde05b","modified":1461826040000},{"_id":"themes/fexo/source/sass/component/_toolbox.scss","shasum":"964a480d4e7fad100463195cde2a3f67f9765c23","modified":1461826040000},{"_id":"themes/fexo/source/sass/pages/_category.scss","shasum":"713242d10c0c8687c9e2f287f1beeb38de6cdbad","modified":1461826040000},{"_id":"themes/fexo/source/sass/pages/_index.scss","shasum":"d9fe73a87585abad06a7dd77b67ec7ce6c24402c","modified":1461826040000},{"_id":"themes/fexo/source/sass/pages/_post.scss","shasum":"c6f694568af362f9fe1e7e2b9909e47303178116","modified":1461826040000},{"_id":"themes/fexo/source/sass/pages/_link.scss","shasum":"d3a249423c7ee88d1cb3a12e03f6c42a0a4d45a1","modified":1461826040000},{"_id":"themes/fexo/source/sass/pages/_home.scss","shasum":"b65bb069ed28fbf223c5bb7e760882f79d20fa46","modified":1461826040000},{"_id":"themes/fexo/source/sass/pages/_project.scss","shasum":"bcbaded3d378bbaa1497f4c3843994ea589f3149","modified":1461826040000},{"_id":"themes/fexo/source/sass/pages/_search.scss","shasum":"fd28f01829628c9d21f9391d5067ddcd836dad13","modified":1461826040000},{"_id":"themes/fexo/source/sass/styles.scss","shasum":"86ebe05d6a2931dd6fceef1e50c31ca996dc20be","modified":1461826040000},{"_id":"themes/fexo/source/css/styles.css.map","shasum":"4e8cc2fab58e96e6581d3752416f9122e0c0ecf2","modified":1461826040000},{"_id":"themes/fexo/source/fonts/calligraffitti-regular-webfont.ttf","shasum":"4688935c427ae40dcbf16523bc11d9fc10e359b5","modified":1461826040000},{"_id":"themes/fexo/source/fonts/PoiretOne-Regular.svg","shasum":"e21109783f218cb7849b12e867e0b775ce3fadda","modified":1461826040000},{"_id":"themes/fexo/source/fonts/calligraffitti-regular-webfont.svg","shasum":"76e1e4cee6f2b5d596c635631938ee5eb6ab3e67","modified":1461826040000},{"_id":"themes/fexo/source/fonts/Lobster-Regular.eot","shasum":"4f0c85f63beb0d95610317e16f1d4acdd2962eee","modified":1461826040000},{"_id":"themes/fexo/source/fonts/Lobster-Regular.ttf","shasum":"50a84291b7012bfdcf9ff5116d6c7aa3f257f37f","modified":1461826040000},{"_id":"themes/fexo/source/fonts/Lobster-Regular.woff","shasum":"298b80b1c9f694e1a055d62a5d809863c89baf50","modified":1461826040000},{"_id":"themes/fexo/source/fonts/Lobster-Regular.svg","shasum":"be1cab622c673942fb4d11a23c012227938b4792","modified":1461826040000}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"Validate Binary Search Tree","date":"2015-04-04T06:44:58.000Z","_content":"\n> 给定一棵二叉树，要判断是否二叉搜索树，一开始还觉得不麻烦，但是做起来突然发起也不顺手。。。\n\n<!--more-->\n\n\n# 题目\n\nGiven a binary tree, determine if it is a valid binary search tree (BST).\n\nAssume a BST is defined as follows:\n\nThe left subtree of a node contains only nodes with keys less than the node's key.\nThe right subtree of a node contains only nodes with keys greater than the node's key.\nBoth the left and right subtrees must also be binary search trees.\n\nconfused what \"{1,#,2,3}\" means? \n\nOJ's Binary Tree Serialization:\nThe serialization of a binary tree follows a level order traversal, where '#' signifies a path terminator where no node exists below.\n\nHere's an example:\n\n\t   1\n\t  / \\\n\t 2   3\n\t    /\n\t   4\n\t    \\\n\t     5\n\nThe above binary tree is serialized as \"{1,2,3,#,#,4,#,#,5}\".\n\n# 思路\n\n* 一看到二叉搜索树的判定，直接就想到了来一个中根序就可以结束比赛了\n* 因为有了上面的念头，于是开始想，有没有别的办法呢？直接来中根序好像太随意了，应该还有更好的方法的。。。\n* 试了一下递归地比自己和自己的两个子节点，结果发现欠考虑了，比右子节点大，不代表比右子树都大！\n* 刚好昨天 IDF 忙了一天，头有点大了，想不下去了，用了个 vector 把中根序存起来，实现了一下。\n* 上网转了一圈，发现[水中的鱼](http://fisherlei.blogspot.com/2013/01/leetcode-validate-binary-search-tree.html)用了一个貌似挺不错的方法，有空得回头看一下，但是 Update 的那个用了 INT_MIN 和 INT_MAX, 在 [LeetCode 讨论](https://leetcode.com/discuss/14886/order-traversal-please-rely-buggy-int_max-int_min-solutions)上有人说这两个宏不能用得太随意，搜了一眼，没看到细节的东西，这个也得再了解一下\n* [LeetCode 讨论](https://leetcode.com/discuss/14886/order-traversal-please-rely-buggy-int_max-int_min-solutions)中有个方法把中根序的做法合并了一下，直接记录上一个节点的引用，完成对中根序的比较，也是挺赞的，但是可惜时间复杂度上并没有太大的帮助\n\n\n# Codes\n\n自己的中根序比较\n\n```\n/**\n * Definition for binary tree\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    bool isValidBST(TreeNode *root) {\n        if( root == NULL )\n        \treturn true;\n        midOrder( root );\n        return isOrdered( list );\n\n    }\n    std::vector<int> list;\n    void midOrder( TreeNode *node )\n    {\n    \tif( node == NULL )\n    \t\treturn ;\n    \tmidOrder( node->left );\n    \tlist.push_back(node->val);\n    \tmidOrder( node->right );\n\n    }\n    bool isOrdered(std::vector<int> &v)\n    {\n    \tfor(std::vector<int>::iterator i = v.begin(); ++i != v.end(); )\n    \t{\n    \t\tif( *i >= *(i + 1) )\n    \t\t\treturn false;\n    \t}\n    \treturn true;\n    }\n};\n```\n\n中根序合并\n\n```\n/**\n * Definition for binary tree\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    bool isValidBST(TreeNode *root) {\n    \tTreeNode *p = NULL;\n    \treturn inOrder( root, p );    \n    }\n\n    bool inOrder(TreeNode *node, TreeNode *prev)\n    {\n    \tif( node == NULL )\n    \t\treturn true;\n    \tif( !inOrder( node, node->left ) )\n    \t\treturn false;\n    \tif(( prev != NULL )&&( node->val <= prev->val ))\n    \t\treturn false;\n    \treturn inOrder( node->right, node );\n    }\n};\n```","source":"_posts/validateBST.md","raw":"title: \"Validate Binary Search Tree\"\ndate: 2015-04-04 14:44:58\ntags: \n- tech\n- leetcode\n---\n\n> 给定一棵二叉树，要判断是否二叉搜索树，一开始还觉得不麻烦，但是做起来突然发起也不顺手。。。\n\n<!--more-->\n\n\n# 题目\n\nGiven a binary tree, determine if it is a valid binary search tree (BST).\n\nAssume a BST is defined as follows:\n\nThe left subtree of a node contains only nodes with keys less than the node's key.\nThe right subtree of a node contains only nodes with keys greater than the node's key.\nBoth the left and right subtrees must also be binary search trees.\n\nconfused what \"{1,#,2,3}\" means? \n\nOJ's Binary Tree Serialization:\nThe serialization of a binary tree follows a level order traversal, where '#' signifies a path terminator where no node exists below.\n\nHere's an example:\n\n\t   1\n\t  / \\\n\t 2   3\n\t    /\n\t   4\n\t    \\\n\t     5\n\nThe above binary tree is serialized as \"{1,2,3,#,#,4,#,#,5}\".\n\n# 思路\n\n* 一看到二叉搜索树的判定，直接就想到了来一个中根序就可以结束比赛了\n* 因为有了上面的念头，于是开始想，有没有别的办法呢？直接来中根序好像太随意了，应该还有更好的方法的。。。\n* 试了一下递归地比自己和自己的两个子节点，结果发现欠考虑了，比右子节点大，不代表比右子树都大！\n* 刚好昨天 IDF 忙了一天，头有点大了，想不下去了，用了个 vector 把中根序存起来，实现了一下。\n* 上网转了一圈，发现[水中的鱼](http://fisherlei.blogspot.com/2013/01/leetcode-validate-binary-search-tree.html)用了一个貌似挺不错的方法，有空得回头看一下，但是 Update 的那个用了 INT_MIN 和 INT_MAX, 在 [LeetCode 讨论](https://leetcode.com/discuss/14886/order-traversal-please-rely-buggy-int_max-int_min-solutions)上有人说这两个宏不能用得太随意，搜了一眼，没看到细节的东西，这个也得再了解一下\n* [LeetCode 讨论](https://leetcode.com/discuss/14886/order-traversal-please-rely-buggy-int_max-int_min-solutions)中有个方法把中根序的做法合并了一下，直接记录上一个节点的引用，完成对中根序的比较，也是挺赞的，但是可惜时间复杂度上并没有太大的帮助\n\n\n# Codes\n\n自己的中根序比较\n\n```\n/**\n * Definition for binary tree\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    bool isValidBST(TreeNode *root) {\n        if( root == NULL )\n        \treturn true;\n        midOrder( root );\n        return isOrdered( list );\n\n    }\n    std::vector<int> list;\n    void midOrder( TreeNode *node )\n    {\n    \tif( node == NULL )\n    \t\treturn ;\n    \tmidOrder( node->left );\n    \tlist.push_back(node->val);\n    \tmidOrder( node->right );\n\n    }\n    bool isOrdered(std::vector<int> &v)\n    {\n    \tfor(std::vector<int>::iterator i = v.begin(); ++i != v.end(); )\n    \t{\n    \t\tif( *i >= *(i + 1) )\n    \t\t\treturn false;\n    \t}\n    \treturn true;\n    }\n};\n```\n\n中根序合并\n\n```\n/**\n * Definition for binary tree\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    bool isValidBST(TreeNode *root) {\n    \tTreeNode *p = NULL;\n    \treturn inOrder( root, p );    \n    }\n\n    bool inOrder(TreeNode *node, TreeNode *prev)\n    {\n    \tif( node == NULL )\n    \t\treturn true;\n    \tif( !inOrder( node, node->left ) )\n    \t\treturn false;\n    \tif(( prev != NULL )&&( node->val <= prev->val ))\n    \t\treturn false;\n    \treturn inOrder( node->right, node );\n    }\n};\n```","slug":"validateBST","published":1,"updated":"2016-03-16T13:24:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civjlvybn0000fnfdrhg200kp"},{"title":"Tesla in Beijing","date":"2015-03-31T15:40:54.000Z","_content":"\n> 假期北京一日游~~流~~，看到突然看到好几辆 Model S，突然有种感觉，Elon Musk 真心有本事啊！尤其是那神一般的执行力，或者说对产品的实现的能力。\n\n<!--more-->\n\n# Elon Musk\n\n被称为现实版钢铁侠的男人（听着好带感~）\n\n* 12 岁售出以宇宙为背景的游戏\n* 28 岁以 3.41 亿美元加期权把自己的第一间公司 ZIP2 卖给 Compaq\n* 28 岁创办 X.COM 发展成今天的 PayPal\n* 31 岁创立 SpaceX，最近新闻好火的蚱蜢就是 SpaceX 在折腾的\n* 32 岁 Tesla 成立，这位大哥又是联合创始人\n* 其它还有 Hyperloop Train 的神奇想法之类的\n\n只有一个评价，大哥，你真的做出了不少东西！\n\n# Tesla\n\n回到今天的见闻，Tesla。\n\n今天碰巧在路边停了一辆 Model S，看了一眼身边油画出身，一向眼光独到的媳妇，\n\n\t媳妇，你觉得这车怎么样？\n\t好像青蛙啊！\n\t怎么会呢，青蛙那是宝时捷吧？\n\t不对，那是牛蛙，这是我们经常吃的那种\n\t。。。\n\t看你激动的，这不就是你经常说的那个电动车嘛，现在国内那些电动小车，不也差不多嘛~\n\t。。。\n\t\n一时我竟无语凝噎，只能说一句，这车是超跑水平的呢！\n\n---\nModel S 确实是做得十分出彩，但是更出彩的，我觉得，还是 Tesla 准确的市场定位，并努力做到了很好看的销售成绩。\n\n从以上我和媳妇的对话，我觉得 Model S 对大众的吸引力应该不算特别大的，如果要说这只是我媳妇一个人的观点，你可以问一下身边对 Model S 的第一感觉。\n\n对于 Tesla 对 Model S 在国内的产品定位，我自己脑补一下如果 Model S 当时在中国开发发布会是怎么样的\n\n\tMusk：\n\t今天，我为大家带来了一个全新的产品\n\t他有着全新的外观设计\n\t他极度环境友好，纯电动\n\t他性能强悍，百公里加速只需 3.7 秒，极速为 210km/h\n\t最重要的是，我们提供了全天的续航，超过 300km，甚至是 400km！\n\t台下：\n\t一片欢呼雀跃，掌声雷动。\n\t\n\tOne more thing:\n\t价格，我们绝不瞎砍国内的土豪们，童叟无欺！\n\t$81070 米国价格\n\t$3600  运费\n\t$19000 关税和其它相关税\n\t$17700 增值税\n\t---\n\t￥73400（ 6.05 元/刀 ）\n\t\n\t台下这时候只有一个声音了：\n\tShut up and take my money!\n\t别放毒了，拿钱，给车！\n\t\n总的来说，就是做到了满足日用，超跑性能，但是定价比入门车高，比土豪车便宜，这个时候很多人在家里有车，又有点闲钱，想再买 一个车的时候，看到 Tesla 在网上的各种出彩，自然就会有想败一辆试试看的冲动。\n\n> 实实在在做产品，准确定位，成功就营销\n\n这就是我认为的 Tesla 在国内火的原因。\n\n---\n越写越困了，回来晚了，太困了，快编不下去了，囧rz\n\n# 自己\n\n小学语文老师经常和我们说，写文章最后要有总结，写上自己的感想，所以补一段。\n\n* 经常会有一些想法蹦出来\n* 一些东西会尝试着去做\n* 但是经常会因为一些问题或突然觉得价值不大而放弃\n\n\n从以上的瞎编看来，自己这些想法，还是应该好好思考一下，实实在在地做出来，起码这样也算是迈出了第一步！\n\n最近也狠心败了一台 rMBP，说实话，下了很大决心，而且是用自己挣来的钱败的，想想挺冲动的，但是回头看看，败了 rMBP 之后，自己确实也开始做做很多事，Android 又开始看了，笔记也整理得好看点了，博客也又捡起来了，算是开始实实在在地做一些事了，接下来，就是在真正地实实在在地做事！\n\n","source":"_posts/tesla-in-beijing.md","raw":"title: \"Tesla in Beijing\"\ndate: 2015-03-31 23:40:54\ntags: \n- fun\n---\n\n> 假期北京一日游~~流~~，看到突然看到好几辆 Model S，突然有种感觉，Elon Musk 真心有本事啊！尤其是那神一般的执行力，或者说对产品的实现的能力。\n\n<!--more-->\n\n# Elon Musk\n\n被称为现实版钢铁侠的男人（听着好带感~）\n\n* 12 岁售出以宇宙为背景的游戏\n* 28 岁以 3.41 亿美元加期权把自己的第一间公司 ZIP2 卖给 Compaq\n* 28 岁创办 X.COM 发展成今天的 PayPal\n* 31 岁创立 SpaceX，最近新闻好火的蚱蜢就是 SpaceX 在折腾的\n* 32 岁 Tesla 成立，这位大哥又是联合创始人\n* 其它还有 Hyperloop Train 的神奇想法之类的\n\n只有一个评价，大哥，你真的做出了不少东西！\n\n# Tesla\n\n回到今天的见闻，Tesla。\n\n今天碰巧在路边停了一辆 Model S，看了一眼身边油画出身，一向眼光独到的媳妇，\n\n\t媳妇，你觉得这车怎么样？\n\t好像青蛙啊！\n\t怎么会呢，青蛙那是宝时捷吧？\n\t不对，那是牛蛙，这是我们经常吃的那种\n\t。。。\n\t看你激动的，这不就是你经常说的那个电动车嘛，现在国内那些电动小车，不也差不多嘛~\n\t。。。\n\t\n一时我竟无语凝噎，只能说一句，这车是超跑水平的呢！\n\n---\nModel S 确实是做得十分出彩，但是更出彩的，我觉得，还是 Tesla 准确的市场定位，并努力做到了很好看的销售成绩。\n\n从以上我和媳妇的对话，我觉得 Model S 对大众的吸引力应该不算特别大的，如果要说这只是我媳妇一个人的观点，你可以问一下身边对 Model S 的第一感觉。\n\n对于 Tesla 对 Model S 在国内的产品定位，我自己脑补一下如果 Model S 当时在中国开发发布会是怎么样的\n\n\tMusk：\n\t今天，我为大家带来了一个全新的产品\n\t他有着全新的外观设计\n\t他极度环境友好，纯电动\n\t他性能强悍，百公里加速只需 3.7 秒，极速为 210km/h\n\t最重要的是，我们提供了全天的续航，超过 300km，甚至是 400km！\n\t台下：\n\t一片欢呼雀跃，掌声雷动。\n\t\n\tOne more thing:\n\t价格，我们绝不瞎砍国内的土豪们，童叟无欺！\n\t$81070 米国价格\n\t$3600  运费\n\t$19000 关税和其它相关税\n\t$17700 增值税\n\t---\n\t￥73400（ 6.05 元/刀 ）\n\t\n\t台下这时候只有一个声音了：\n\tShut up and take my money!\n\t别放毒了，拿钱，给车！\n\t\n总的来说，就是做到了满足日用，超跑性能，但是定价比入门车高，比土豪车便宜，这个时候很多人在家里有车，又有点闲钱，想再买 一个车的时候，看到 Tesla 在网上的各种出彩，自然就会有想败一辆试试看的冲动。\n\n> 实实在在做产品，准确定位，成功就营销\n\n这就是我认为的 Tesla 在国内火的原因。\n\n---\n越写越困了，回来晚了，太困了，快编不下去了，囧rz\n\n# 自己\n\n小学语文老师经常和我们说，写文章最后要有总结，写上自己的感想，所以补一段。\n\n* 经常会有一些想法蹦出来\n* 一些东西会尝试着去做\n* 但是经常会因为一些问题或突然觉得价值不大而放弃\n\n\n从以上的瞎编看来，自己这些想法，还是应该好好思考一下，实实在在地做出来，起码这样也算是迈出了第一步！\n\n最近也狠心败了一台 rMBP，说实话，下了很大决心，而且是用自己挣来的钱败的，想想挺冲动的，但是回头看看，败了 rMBP 之后，自己确实也开始做做很多事，Android 又开始看了，笔记也整理得好看点了，博客也又捡起来了，算是开始实实在在地做一些事了，接下来，就是在真正地实实在在地做事！\n\n","slug":"tesla-in-beijing","published":1,"updated":"2016-03-16T13:24:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civjlvydb0005fnfdw86bh93q"},{"title":"subsets in leetcode","date":"2015-05-09T12:58:51.000Z","_content":"\n> 回朔法实践\n \n<!--more-->\n# 原题\n\n```\nGiven a set of distinct integers, nums, return all possible subsets.\n\nNote:\nElements in a subset must be in non-descending order.\nThe solution set must not contain duplicate subsets.\nFor example,\nIf nums = [1,2,3], a solution is:\n\n[\n  [3],\n  [1],\n  [2],\n  [1,2,3],\n  [1,3],\n  [2,3],\n  [1,2],\n  []\n]\n```\n\n# 解题思路\n\n## 解决问题的基本思路\n\n1. 明显例子的输出是刻意打乱了\n2. 用一个小例子\n3. 整理输出\n4. 尝试推广\n\n## 具体做法\n* 1，2，3 作为小例子开始  \n* 整理输出，可能的输出顺序应是：\n\n\t```\n\t1\n\t2\n\t3\n\t1 2\n\t1 3\n\t2 3\n\t1 2 3\n\t\n\t```\n\t用程序好像不容易实现\n\t既然是回朔法，那再试试\n\t\n\t```\n\t1\n\t1 2\n\t1 2 3\n\t1 3\n\t2\n\t2 3\n\t3\n\t```\n\t从这个输出能看出来，如果用递归，就可以从后面向前一点点组合\n* Code\n\n\t```\nclass Solution {\npublic:\n    vector<vector<int>> subsets(vector<int>& nums) {\n        vector<vector<int>> result;\n        vector<int> sets;\n        result.push_back(sets);\n        sort(nums.begin(), nums.end());\n        for(int i = 0; i < nums.size(); i++)\n            generater(result, nums, sets, i);\n        return result;\n    }\n    void generater(vector<vector<int>> &output, vector<int> &resource, vector<int> sub, int index){\n        if(index >= resource.size())\n            return;\n        sub.push_back(resource[index]);\n        output.push_back(sub);\n        for(int i = index + 1; i < resource.size(); i++){\n            generater(output, resource, sub, i);\n        }\n\n\n    }\n};\t\n\t```\n代码虽然不够漂亮，但这是自己一点点推出来的。\n\n## 漂亮代码 \n要找漂亮代码当然是 discuss 区！-> [这里](https://leetcode.com/discuss/questions/oj/subsets)\n\n# 得失\n\n## 得\n* 培养自己一点点找思路，推出答案\n* 开始理解 Backtracking 回朔法的概念\n\n## 失\n\n* 自己对算法还是很不熟悉，复杂一点的算法就容易没有思路","source":"_posts/subsets.md","raw":"title: \"subsets in leetcode\"\ndate: 2015-05-09 20:58:51\ntags:\n- tech\n- leetcode\n---\n\n> 回朔法实践\n \n<!--more-->\n# 原题\n\n```\nGiven a set of distinct integers, nums, return all possible subsets.\n\nNote:\nElements in a subset must be in non-descending order.\nThe solution set must not contain duplicate subsets.\nFor example,\nIf nums = [1,2,3], a solution is:\n\n[\n  [3],\n  [1],\n  [2],\n  [1,2,3],\n  [1,3],\n  [2,3],\n  [1,2],\n  []\n]\n```\n\n# 解题思路\n\n## 解决问题的基本思路\n\n1. 明显例子的输出是刻意打乱了\n2. 用一个小例子\n3. 整理输出\n4. 尝试推广\n\n## 具体做法\n* 1，2，3 作为小例子开始  \n* 整理输出，可能的输出顺序应是：\n\n\t```\n\t1\n\t2\n\t3\n\t1 2\n\t1 3\n\t2 3\n\t1 2 3\n\t\n\t```\n\t用程序好像不容易实现\n\t既然是回朔法，那再试试\n\t\n\t```\n\t1\n\t1 2\n\t1 2 3\n\t1 3\n\t2\n\t2 3\n\t3\n\t```\n\t从这个输出能看出来，如果用递归，就可以从后面向前一点点组合\n* Code\n\n\t```\nclass Solution {\npublic:\n    vector<vector<int>> subsets(vector<int>& nums) {\n        vector<vector<int>> result;\n        vector<int> sets;\n        result.push_back(sets);\n        sort(nums.begin(), nums.end());\n        for(int i = 0; i < nums.size(); i++)\n            generater(result, nums, sets, i);\n        return result;\n    }\n    void generater(vector<vector<int>> &output, vector<int> &resource, vector<int> sub, int index){\n        if(index >= resource.size())\n            return;\n        sub.push_back(resource[index]);\n        output.push_back(sub);\n        for(int i = index + 1; i < resource.size(); i++){\n            generater(output, resource, sub, i);\n        }\n\n\n    }\n};\t\n\t```\n代码虽然不够漂亮，但这是自己一点点推出来的。\n\n## 漂亮代码 \n要找漂亮代码当然是 discuss 区！-> [这里](https://leetcode.com/discuss/questions/oj/subsets)\n\n# 得失\n\n## 得\n* 培养自己一点点找思路，推出答案\n* 开始理解 Backtracking 回朔法的概念\n\n## 失\n\n* 自己对算法还是很不熟悉，复杂一点的算法就容易没有思路","slug":"subsets","published":1,"updated":"2016-03-16T13:24:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civjlvydk0008fnfdv55gk0bl"},{"title":"Sessions control for hammerspoon","date":"2015-07-11T15:48:27.000Z","_content":"\n> Sessions control 是一套基于 hammerspoon(Mac) 的脚本程序。可以通过快捷键把 Mac 中的各个窗口归类，并快速的在各个分类中切换，包括全屏的窗口也会自己切换。\n\n<!--more-->\n\n\t注意：本程序还处于开发状态，不会关闭或丢失窗口，但并不对稳定性提供保证，请勿用于正式工作中！\n\n\n# Hammerspoon\n\n# sessions control\n\n## 简介\n\nSessions control 主要有以下三个功能：\n\n* 显示当前场景(sessions)\n* 为当前场景增删窗口(windows)\n* 在不同场景中切换\n\n当前实现主要通过把窗口最小化完成场景切换，后期版本会考虑把窗口隐藏，不占用任务栏空间。\n\n目前主要优势在于同时可以处理**全屏窗口**，当切换场景时，全屏的窗口也会同时最小化，前台场景也会恢复应有的全屏状态。\n\n\t由于切换动画为系统动画，所以无法简单地关闭动画，在切换场景的时候会有部分动画。\n\n各个场景都会定时保存到磁盘中，以保证各个场景不会因为 hammerspoon 或电脑的开关而丢失。\n\n对各个功能的快捷键提供定制，在脚本中可以很简单地修改快捷键。\n\n## 安装\n\n1. 从 GitHub 中下载压缩包，或 clone 仓库到本地\n2. 把 `sessions-control-hammerspoon` 文件夹复制到 `~/.hammerspoon/` 文件夹下\n3. 更新 `~/.hammerspoon/` 目录下 `init.lua`，加入 sessions control 功能\n\n下载地址：\n\n* GitHub 地址：()[]\n* GiuHub 压缩包地址：()[]\n\n> 注：`.hammerspoon` 是隐藏文件夹，如果找不到相应位置，可以运行下载的程序中的 `setup` 程序，会自动复制相应文件到目标位置，并自动更新 `init.lua`。\n\t\n> 注：`init.lua` 是 `hammerspoon` 本身自带的初始化文件。\n\n## 功能说明\n\n在本说明中使用默认的快捷键进行说明，操作主要是先按住功能键，然后点击相应快捷键，默认键位如下：\n\n* 功能键：  \n\tctrl + alt + cmd\n\n* 显示当前场景：P\n* 前一场景：[\n* 下一场景：]\n* 加入当前场景：L\n* 从当前场景删除：；\n* 数字键快速切换：1 ~ 场景数\n\n其中，`数字键快速切换` 会按照场景数自动生成，通过按住功能键，加上相应的数字可以快速在场景间切换。\n\t\n默认键位都位于键盘右侧，通过功能分区。\n\t\n### 显示当前场景\n\n> 按住 `ctrl + alt + cmd` 后，点击 `P`\n\n通过系统通知展示当前各个场景，并自动编号，便于后面的快速切换。\n\n当然，同时进行太多任务会很乱，所以不应该同时有太多场景，同时，系统通知中不可以放入过长的内容，所以刚刚好 (;¬_¬)\n\n### 前后场景\n\n> * 前一场景：按住 `ctrl + alt + cmd` 后，点击 `[`\n> * 下一场景：按住 `ctrl + alt + cmd` 后，点击 `]`\n\n这两个功能主要用于切换上一个或下一个场景，完成按键后，会自动记录当前窗口的全屏状态，并把当前场景的窗口最小后，然后切换到新场景，恢复新场景中的窗口状态。\n\n### 窗口操作\n\n> * 加入：按住 `ctrl + alt + cmd` 后，点击 `L`\n> * 删除：按住 `ctrl + alt + cmd` 后，点击 `;`\n\n这两个功能主要用于对当前窗口的操作\n\n* 把正在使用的窗口加入到当前场景中\n* 从当前场景中删除正在使用的窗口\n\n增删窗口之后会弹出通知提示完成操作，并显示当前场景中共有几个窗口\n\n### 快速切换\n\n在查看场景时，每个场景名之前会有一个序号，该序号可用于快速切换，主要用于跨越多个场景的切换时，避免多个最大化，最小化动画。\n\n使用方法就是按住功能键后，再按相应的序号键（注：未测试小键盘区）\n\n> * 按住 `ctrl + alt + cmd` 后，点击 `1`\n> * 按住 `ctrl + alt + cmd` 后，点击 `2`\n> * ...\n\n\n# 程序实现\n\nSessions control 是基于 Hammerspoon 的脚本程序，使用 lua 编写，主要是两个文件实现。\n\n* sessions_control.lua\n* sessions_head.lua\n\n为了方便管理，把这两个文件放到了 `sessions-control-hammerspoon` 文件夹中。","source":"_posts/sessions-control-hammerspoon-doc.md","raw":"title: \"Sessions control for hammerspoon\"\ndate: 2015-07-11 23:48:27\ntags:\n- tech\n- Software\n---\n\n> Sessions control 是一套基于 hammerspoon(Mac) 的脚本程序。可以通过快捷键把 Mac 中的各个窗口归类，并快速的在各个分类中切换，包括全屏的窗口也会自己切换。\n\n<!--more-->\n\n\t注意：本程序还处于开发状态，不会关闭或丢失窗口，但并不对稳定性提供保证，请勿用于正式工作中！\n\n\n# Hammerspoon\n\n# sessions control\n\n## 简介\n\nSessions control 主要有以下三个功能：\n\n* 显示当前场景(sessions)\n* 为当前场景增删窗口(windows)\n* 在不同场景中切换\n\n当前实现主要通过把窗口最小化完成场景切换，后期版本会考虑把窗口隐藏，不占用任务栏空间。\n\n目前主要优势在于同时可以处理**全屏窗口**，当切换场景时，全屏的窗口也会同时最小化，前台场景也会恢复应有的全屏状态。\n\n\t由于切换动画为系统动画，所以无法简单地关闭动画，在切换场景的时候会有部分动画。\n\n各个场景都会定时保存到磁盘中，以保证各个场景不会因为 hammerspoon 或电脑的开关而丢失。\n\n对各个功能的快捷键提供定制，在脚本中可以很简单地修改快捷键。\n\n## 安装\n\n1. 从 GitHub 中下载压缩包，或 clone 仓库到本地\n2. 把 `sessions-control-hammerspoon` 文件夹复制到 `~/.hammerspoon/` 文件夹下\n3. 更新 `~/.hammerspoon/` 目录下 `init.lua`，加入 sessions control 功能\n\n下载地址：\n\n* GitHub 地址：()[]\n* GiuHub 压缩包地址：()[]\n\n> 注：`.hammerspoon` 是隐藏文件夹，如果找不到相应位置，可以运行下载的程序中的 `setup` 程序，会自动复制相应文件到目标位置，并自动更新 `init.lua`。\n\t\n> 注：`init.lua` 是 `hammerspoon` 本身自带的初始化文件。\n\n## 功能说明\n\n在本说明中使用默认的快捷键进行说明，操作主要是先按住功能键，然后点击相应快捷键，默认键位如下：\n\n* 功能键：  \n\tctrl + alt + cmd\n\n* 显示当前场景：P\n* 前一场景：[\n* 下一场景：]\n* 加入当前场景：L\n* 从当前场景删除：；\n* 数字键快速切换：1 ~ 场景数\n\n其中，`数字键快速切换` 会按照场景数自动生成，通过按住功能键，加上相应的数字可以快速在场景间切换。\n\t\n默认键位都位于键盘右侧，通过功能分区。\n\t\n### 显示当前场景\n\n> 按住 `ctrl + alt + cmd` 后，点击 `P`\n\n通过系统通知展示当前各个场景，并自动编号，便于后面的快速切换。\n\n当然，同时进行太多任务会很乱，所以不应该同时有太多场景，同时，系统通知中不可以放入过长的内容，所以刚刚好 (;¬_¬)\n\n### 前后场景\n\n> * 前一场景：按住 `ctrl + alt + cmd` 后，点击 `[`\n> * 下一场景：按住 `ctrl + alt + cmd` 后，点击 `]`\n\n这两个功能主要用于切换上一个或下一个场景，完成按键后，会自动记录当前窗口的全屏状态，并把当前场景的窗口最小后，然后切换到新场景，恢复新场景中的窗口状态。\n\n### 窗口操作\n\n> * 加入：按住 `ctrl + alt + cmd` 后，点击 `L`\n> * 删除：按住 `ctrl + alt + cmd` 后，点击 `;`\n\n这两个功能主要用于对当前窗口的操作\n\n* 把正在使用的窗口加入到当前场景中\n* 从当前场景中删除正在使用的窗口\n\n增删窗口之后会弹出通知提示完成操作，并显示当前场景中共有几个窗口\n\n### 快速切换\n\n在查看场景时，每个场景名之前会有一个序号，该序号可用于快速切换，主要用于跨越多个场景的切换时，避免多个最大化，最小化动画。\n\n使用方法就是按住功能键后，再按相应的序号键（注：未测试小键盘区）\n\n> * 按住 `ctrl + alt + cmd` 后，点击 `1`\n> * 按住 `ctrl + alt + cmd` 后，点击 `2`\n> * ...\n\n\n# 程序实现\n\nSessions control 是基于 Hammerspoon 的脚本程序，使用 lua 编写，主要是两个文件实现。\n\n* sessions_control.lua\n* sessions_head.lua\n\n为了方便管理，把这两个文件放到了 `sessions-control-hammerspoon` 文件夹中。","slug":"sessions-control-hammerspoon-doc","published":1,"updated":"2015-08-05T04:01:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civjlvydx000bfnfd7osljmlg"},{"title":"symmetric tree in leetcode","date":"2015-05-21T09:23:58.000Z","_content":"\n> 提交递归 symmetric tree 代码的时候突然发现时间居然只要 4ms，比想像的还要好，所以又到了记录的时候了！\n\n> 写了一个迭代算法了，也只用了4ms, 为什么提交记录里 C++ 用时都挺多，但是这我刚的这两个都只用 4ms 呢？\n\n\n<!--more-->\n\n# 递归\n## 思路\n* 这是一棵树！  \n  必须要有的想法，看到一棵树，递归！\n* 这棵树是左右对称的  \n  从左向右看 和 从右向左看 应该是一结果应该是一样的  \n  \n\t> 这在突然想到，这样的话，就是从两边进行一个遍历再对比的过程，但是一个遍历结果并不能代表一棵树，会不会有问题呢？  \n\t> 很快就否定自己了，一个个比对的话，在对比的时候就确定了是相应的节点了，没有问题。\n* 对比条件\n  * 两个 NULL，真\n  * 一个 NULL，一个非 NULL，假\n  * 比较 value\t\n    * value 不等，假\n    * value 相等，递归进行两次比较\n\t\t\n\t```\n\tfirst->left, second->right\n\tfirst->right, second->left\n\t```\n\t返回两个递归比较和与。\n* 边界条件\n  * root == NULL 真\n\t\n\t\n## 代码\n\n```\nclass Solution {\npublic:\n    bool isSymmetric(TreeNode* root) {\n        if(root == NULL)\n            return true;\n        return checkSymmetric(root->left, root->right);\n    }\nprivate:\n    bool checkSymmetric(TreeNode *first, TreeNode *second){\n        if(first == NULL && second == NULL)\n            return true;        \n        if(first == NULL ^ second == NULL)\n            return false;\n        if(first->val == second->val){\n            return checkSymmetric(first->left, second->right) && checkSymmetric(first->right, second->left);\n        }\n        return false;\n    }\n};\n```\n\n# 迭代\n## 思路\n* 左右对称的，那就一层层比较，每层是不是对称的，广度优先，BFS\n* 非递归，用栈实现 BFS\n* 每层在比对的时候需要空间保存节点，如果用支持随机访问的容器可以省空间\n* 后面要加进来下一层的节点，前面要删除本层节点\n* 结果出来了，**deque 双向队列**\n* 各层比较\n  * 记录当前层节点数\n  * 每层头尾比较，包含 NULL\n  * 两个都为 NULL，真\n  * 两个都非 NULL，val 相等，真\n  * 两个非 NULL，val 不等，假\n  * 一个 NULL 一个非 NULL，假\n  * 出现假直接返回就 OK\n* 队列处理\n  * 比较完一层，没有为假，把上层的节点出队\n  * 出队的节点如果为 NULL，直接删除\n  * 节点非 NULL，子节点入队（无论子节点是否为 NULL）\n  * 按节点数出完队之后进行下一个循环\n  * 循环跑完，则为真！\n* 边界条件\n  * root 为 NULL，先对 root 进行判断\n  * 树中有 NULL 节点位置不同使得不对称树的某层非 NULL 节点对称，如：\n    * 1 2 NULL 3 3 2 NULL 1\n    * 如果只存非 NULL 节点，则是对称的\n    * 所以 NULL 节点也要入队\n\t\t\n\t\t\n## 代码\n```\nclass Solution {\npublic:\n\tbool isSymmetric(TreeNode *root){\n\t\tif(root == NULL)\n\t\t\treturn true;\n\t\tTreeNode *walker = NULL;\n\t\tint layer_size = 0;\n\t\tdeque<TreeNode *> tree_deque;\n\t\ttree_deque.push_back(root->left);\n\t\ttree_deque.push_back(root->right);\n\t\twhile(!tree_deque.empty()){\n\t\t\tlayer_size = tree_deque.size();\n\t\t\tfor(int i = 0; i < layer_size / 2; i++){\n\t\t\t\tif(tree_deque[i] == NULL ^ tree_deque[layer_size - 1 - i] == NULL) \n\t\t\t\t\treturn false;\n\t\t\t\tif(tree_deque[i] != NULL && tree_deque[layer_size - 1 - i] != NULL \n\t\t\t\t\t&& tree_deque[i]->val != tree_deque[layer_size - 1 - i]->val )\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t\tfor(int i = 0; i < layer_size; i++){\n\t\t\t\twalker = tree_deque.front();\n\t\t\t\ttree_deque.pop_front();\n\t\t\t\tif(walker != NULL){\n\t\t\t\t\ttree_deque.push_back(walker->left);\n\t\t\t\t\ttree_deque.push_back(walker->right);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n};\n```","source":"_posts/recursive-symmetric-tree.md","raw":"title: \"symmetric tree in leetcode\"\ndate: 2015-05-21 17:23:58\ntags:\n- leetcode\n- tech\n---\n\n> 提交递归 symmetric tree 代码的时候突然发现时间居然只要 4ms，比想像的还要好，所以又到了记录的时候了！\n\n> 写了一个迭代算法了，也只用了4ms, 为什么提交记录里 C++ 用时都挺多，但是这我刚的这两个都只用 4ms 呢？\n\n\n<!--more-->\n\n# 递归\n## 思路\n* 这是一棵树！  \n  必须要有的想法，看到一棵树，递归！\n* 这棵树是左右对称的  \n  从左向右看 和 从右向左看 应该是一结果应该是一样的  \n  \n\t> 这在突然想到，这样的话，就是从两边进行一个遍历再对比的过程，但是一个遍历结果并不能代表一棵树，会不会有问题呢？  \n\t> 很快就否定自己了，一个个比对的话，在对比的时候就确定了是相应的节点了，没有问题。\n* 对比条件\n  * 两个 NULL，真\n  * 一个 NULL，一个非 NULL，假\n  * 比较 value\t\n    * value 不等，假\n    * value 相等，递归进行两次比较\n\t\t\n\t```\n\tfirst->left, second->right\n\tfirst->right, second->left\n\t```\n\t返回两个递归比较和与。\n* 边界条件\n  * root == NULL 真\n\t\n\t\n## 代码\n\n```\nclass Solution {\npublic:\n    bool isSymmetric(TreeNode* root) {\n        if(root == NULL)\n            return true;\n        return checkSymmetric(root->left, root->right);\n    }\nprivate:\n    bool checkSymmetric(TreeNode *first, TreeNode *second){\n        if(first == NULL && second == NULL)\n            return true;        \n        if(first == NULL ^ second == NULL)\n            return false;\n        if(first->val == second->val){\n            return checkSymmetric(first->left, second->right) && checkSymmetric(first->right, second->left);\n        }\n        return false;\n    }\n};\n```\n\n# 迭代\n## 思路\n* 左右对称的，那就一层层比较，每层是不是对称的，广度优先，BFS\n* 非递归，用栈实现 BFS\n* 每层在比对的时候需要空间保存节点，如果用支持随机访问的容器可以省空间\n* 后面要加进来下一层的节点，前面要删除本层节点\n* 结果出来了，**deque 双向队列**\n* 各层比较\n  * 记录当前层节点数\n  * 每层头尾比较，包含 NULL\n  * 两个都为 NULL，真\n  * 两个都非 NULL，val 相等，真\n  * 两个非 NULL，val 不等，假\n  * 一个 NULL 一个非 NULL，假\n  * 出现假直接返回就 OK\n* 队列处理\n  * 比较完一层，没有为假，把上层的节点出队\n  * 出队的节点如果为 NULL，直接删除\n  * 节点非 NULL，子节点入队（无论子节点是否为 NULL）\n  * 按节点数出完队之后进行下一个循环\n  * 循环跑完，则为真！\n* 边界条件\n  * root 为 NULL，先对 root 进行判断\n  * 树中有 NULL 节点位置不同使得不对称树的某层非 NULL 节点对称，如：\n    * 1 2 NULL 3 3 2 NULL 1\n    * 如果只存非 NULL 节点，则是对称的\n    * 所以 NULL 节点也要入队\n\t\t\n\t\t\n## 代码\n```\nclass Solution {\npublic:\n\tbool isSymmetric(TreeNode *root){\n\t\tif(root == NULL)\n\t\t\treturn true;\n\t\tTreeNode *walker = NULL;\n\t\tint layer_size = 0;\n\t\tdeque<TreeNode *> tree_deque;\n\t\ttree_deque.push_back(root->left);\n\t\ttree_deque.push_back(root->right);\n\t\twhile(!tree_deque.empty()){\n\t\t\tlayer_size = tree_deque.size();\n\t\t\tfor(int i = 0; i < layer_size / 2; i++){\n\t\t\t\tif(tree_deque[i] == NULL ^ tree_deque[layer_size - 1 - i] == NULL) \n\t\t\t\t\treturn false;\n\t\t\t\tif(tree_deque[i] != NULL && tree_deque[layer_size - 1 - i] != NULL \n\t\t\t\t\t&& tree_deque[i]->val != tree_deque[layer_size - 1 - i]->val )\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t\tfor(int i = 0; i < layer_size; i++){\n\t\t\t\twalker = tree_deque.front();\n\t\t\t\ttree_deque.pop_front();\n\t\t\t\tif(walker != NULL){\n\t\t\t\t\ttree_deque.push_back(walker->left);\n\t\t\t\t\ttree_deque.push_back(walker->right);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n};\n```","slug":"recursive-symmetric-tree","published":1,"updated":"2016-03-16T13:24:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civjlvydz000ffnfdnpgc7ar2"},{"title":"自增运算与 printf 参数顺序","date":"2015-04-19T13:14:48.000Z","_content":"\n\n> 最近找实习，做了两次笔记题发现，有些东西就是你不做题平时很难碰到的，于是乎，就把一直被人喷的 程序员面试宝典 搬出来研究一下。发现这题挺好玩的。\n\n<!--more-->\n\n# 原题目\n\nWhat will be the output of the following C code?（ 以下代码的输出结果是什么？）\n［中国著名通信企业 H 公司 2007 年 7 月面试题］ \n\n```\n#include<stdio.h>\nmain()\n{\n\tint arr[] = {6, 7, 8, 9, 10};\n\tint *ptr = arr;\n\t*(ptr++) += 123;\n\tprintf(\"%d, %d\\n\", *ptr, *(++ptr));\n}\n\n```\n\n## 原题解析\n\n++ 运算相信大家都是知道的，直接到\n\n\t\tprintf(\"%d, %d\\n\", *ptr, *(++ptr));\n\n文章中这题的考点之一就在这里，好玩的地方也就是这里。\n\n> printf(\"%d, %d\\n\", *ptr, *(++ptr))；  \n> 从右到左运算，第一个进行运算的是(++ptr)，也就是 ptr 先自增，则 *ptr = 8, 此时 ptr 指向第三个元素 8， 所以全部为 8。\n\n也就是说输出两个8.\n\n===\n\n===\n# 分析\n\n## OS X\n\nOS X 中使用了 clang 作 C 编译器\n\n> Apple LLVM version 6.0 (clang-600.0.57) (based on LLVM 3.5svn)\n\n输出结果\n\n> 7, 8\n\nbingo~ 找到一个书上的错误\n\n五毛 get~\n\n但是真理之路往往不是这么一帆风顺的\n\n## CentOS\n\n刚好手头有个 CentOS 的机器，GCC 还是有的~于是乎\n\nGCC 版本\n\n> gcc version 4.4.7 20120313 (Red Hat 4.4.7-11) (GCC)\n\n输出结果\n\n> 8, 8\n\n果然又是写书的，又是笔试题，还是不会全错的嘛~\n\n但是你让考试的时候，又是用 OS X 的人情何以堪！！！\n\n~~说不定这就是那59分里，被无辜扣的一分！~~\n\n## Windows\n\n手头没有 Windows 机器，查了一下\n\n[这里](http://blog.csdn.net/bingxuewujian/article/details/6728396)\n说是 VC6.0 中是从右到左的，但是他说的是在整个 printf 之后才会对 i 进行自增\n\n那么，这道题答案\n\n> 8, 8\n\n在 VS 中跑了一下，8, 8\n\n\n# Level up\n\n突然觉得这种时候应该丧心病狂一下，于是应该试试下面这个代码\n\n```\nint main() {\n    int i = 2;\n    printf(\"%d, %d, %d, %d, %d\\n\", i++, i++, i, ++i, i);\n}\n```\n\n## OS X\n\nOS X 还是最接近正常思维地输出了\n\n> 2, 3, 4, 5, 5\n\n## Linux / Win\n\nLinux 和 win 下居然出现了同样的，很神奇的输出\n\n> 4, 3, 5, 5, 5\n\n# Dig into Source Code\n\n这种神奇的情况，自然从 printf 的源码里面看一下原因\n\n看了一下，发现 printf 源码居然这么复杂。。。\n\n看来得找个时间仔细看一下了。","source":"_posts/increment-and-args-order.md","raw":"title: \"自增运算与 printf 参数顺序\"\ndate: 2015-04-19 21:14:48\ntags:\n- tech\n- C\n---\n\n\n> 最近找实习，做了两次笔记题发现，有些东西就是你不做题平时很难碰到的，于是乎，就把一直被人喷的 程序员面试宝典 搬出来研究一下。发现这题挺好玩的。\n\n<!--more-->\n\n# 原题目\n\nWhat will be the output of the following C code?（ 以下代码的输出结果是什么？）\n［中国著名通信企业 H 公司 2007 年 7 月面试题］ \n\n```\n#include<stdio.h>\nmain()\n{\n\tint arr[] = {6, 7, 8, 9, 10};\n\tint *ptr = arr;\n\t*(ptr++) += 123;\n\tprintf(\"%d, %d\\n\", *ptr, *(++ptr));\n}\n\n```\n\n## 原题解析\n\n++ 运算相信大家都是知道的，直接到\n\n\t\tprintf(\"%d, %d\\n\", *ptr, *(++ptr));\n\n文章中这题的考点之一就在这里，好玩的地方也就是这里。\n\n> printf(\"%d, %d\\n\", *ptr, *(++ptr))；  \n> 从右到左运算，第一个进行运算的是(++ptr)，也就是 ptr 先自增，则 *ptr = 8, 此时 ptr 指向第三个元素 8， 所以全部为 8。\n\n也就是说输出两个8.\n\n===\n\n===\n# 分析\n\n## OS X\n\nOS X 中使用了 clang 作 C 编译器\n\n> Apple LLVM version 6.0 (clang-600.0.57) (based on LLVM 3.5svn)\n\n输出结果\n\n> 7, 8\n\nbingo~ 找到一个书上的错误\n\n五毛 get~\n\n但是真理之路往往不是这么一帆风顺的\n\n## CentOS\n\n刚好手头有个 CentOS 的机器，GCC 还是有的~于是乎\n\nGCC 版本\n\n> gcc version 4.4.7 20120313 (Red Hat 4.4.7-11) (GCC)\n\n输出结果\n\n> 8, 8\n\n果然又是写书的，又是笔试题，还是不会全错的嘛~\n\n但是你让考试的时候，又是用 OS X 的人情何以堪！！！\n\n~~说不定这就是那59分里，被无辜扣的一分！~~\n\n## Windows\n\n手头没有 Windows 机器，查了一下\n\n[这里](http://blog.csdn.net/bingxuewujian/article/details/6728396)\n说是 VC6.0 中是从右到左的，但是他说的是在整个 printf 之后才会对 i 进行自增\n\n那么，这道题答案\n\n> 8, 8\n\n在 VS 中跑了一下，8, 8\n\n\n# Level up\n\n突然觉得这种时候应该丧心病狂一下，于是应该试试下面这个代码\n\n```\nint main() {\n    int i = 2;\n    printf(\"%d, %d, %d, %d, %d\\n\", i++, i++, i, ++i, i);\n}\n```\n\n## OS X\n\nOS X 还是最接近正常思维地输出了\n\n> 2, 3, 4, 5, 5\n\n## Linux / Win\n\nLinux 和 win 下居然出现了同样的，很神奇的输出\n\n> 4, 3, 5, 5, 5\n\n# Dig into Source Code\n\n这种神奇的情况，自然从 printf 的源码里面看一下原因\n\n看了一下，发现 printf 源码居然这么复杂。。。\n\n看来得找个时间仔细看一下了。","slug":"increment-and-args-order","published":1,"updated":"2016-03-16T13:24:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civjlvye2000ifnfd3bjsyelk"},{"title":"Hello World","_content":"Welcome to [Hexo](http://hexo.io/)! This is your very first post. Check [documentation](http://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [trobuleshooting](http://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n<!--more-->\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](http://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](http://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](http://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](http://hexo.io/docs/deployment.html)\n\n\n===\n更新！\n自己把自己坑了！之前的branch 没建好，还好自己最近没怎么写 blog...\n\n方法应见：\n[http://wuchong.me/blog/2014/01/17/use-github-to-manage-hexo-source/]()\n\n---\n---\n填坑！\n\n之前一次失误，直接把 Blog 的 hexo 源内容简单地加到了另一个 Branch 中，结果整个 Branch 都乱了！这次感觉好多了，肯定可以正常地把 blog 保存到 hexo branch 中！\n\n参考上面的地址。\n\n我们可以在 Github 上新建一个仓库，保存 Hexo 源内容，但是新开一个 repo 感觉怪怪的，所以我要改为加到 Blog 的 Hexo Branch 中。\n\n\n---\n步骤：\n\n## 传上去\n\n1. blog 先要搭好吧！这个没啥说的~\n2. 把 blog 的 git 拉到本地来\n\n\t```\n\tgit clone git@github.com:zwpaper/zwpaper.github.com.git\n\t#当然，后面的 git 地址要换成自己的\n\t```\n3. 新建一个空 branch\n\n\t```\n\tgit checkout --orphan hexo\n\t#这个选项真的会建一个很干净的分支！连 commit 内容都是新的\n\t```\n4. 把之前存的东西在这个 branch 里都删了，没有用了\n\n\t```\n\tgit rm -rf .\n\t#删 git 中内容\n\t如果文件夹内还有文件要话，也都删掉，但是 .git 不能删！\n\trm -rf *\n\t#这个不会删隐藏文件，所以 .git 也不会被删，但是用 rm 命令还是自己仔细点好。。。\n\t```\n5. 把之前的 hexo 源文件，也就是我们写 blog 的那些都复制到当前文件夹下面\n\n\t```\n\tcp ../blog/* .\n\t#路径自己确定，也是没有复制隐藏文件\n\t```\n6. 加入 .gitignore\n\n\t```\n\t#.gitignore 内容\n\tpublic/\n\t.deploy/\n\t```\n7. 上传到 github\n\n\t```\n\tgit add .\n\tgit commit -m \"first commit\"\n\t#注意下面这个一定要加上 origin hexo\n\t#要不就 push 到 master 里去了\n\tgit push origin hexo\n\t```\n\n好啦，这样就都放到 branch 里去啦，可以安心啦~\n\n等明天试一下从别的电脑拉下来看看。\n\n## 拉下来\n\n```\ngit clone git@github.com:zwpaper/zwpaper.github.com.git -b hexo\n```\n\n## 可补充\n\n其实应该把默认分支改一下，以后 push 的时候直接 push 给 hexo","source":"_posts/hello-world.md","raw":"title: Hello World\n---\nWelcome to [Hexo](http://hexo.io/)! This is your very first post. Check [documentation](http://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [trobuleshooting](http://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n<!--more-->\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](http://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](http://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](http://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](http://hexo.io/docs/deployment.html)\n\n\n===\n更新！\n自己把自己坑了！之前的branch 没建好，还好自己最近没怎么写 blog...\n\n方法应见：\n[http://wuchong.me/blog/2014/01/17/use-github-to-manage-hexo-source/]()\n\n---\n---\n填坑！\n\n之前一次失误，直接把 Blog 的 hexo 源内容简单地加到了另一个 Branch 中，结果整个 Branch 都乱了！这次感觉好多了，肯定可以正常地把 blog 保存到 hexo branch 中！\n\n参考上面的地址。\n\n我们可以在 Github 上新建一个仓库，保存 Hexo 源内容，但是新开一个 repo 感觉怪怪的，所以我要改为加到 Blog 的 Hexo Branch 中。\n\n\n---\n步骤：\n\n## 传上去\n\n1. blog 先要搭好吧！这个没啥说的~\n2. 把 blog 的 git 拉到本地来\n\n\t```\n\tgit clone git@github.com:zwpaper/zwpaper.github.com.git\n\t#当然，后面的 git 地址要换成自己的\n\t```\n3. 新建一个空 branch\n\n\t```\n\tgit checkout --orphan hexo\n\t#这个选项真的会建一个很干净的分支！连 commit 内容都是新的\n\t```\n4. 把之前存的东西在这个 branch 里都删了，没有用了\n\n\t```\n\tgit rm -rf .\n\t#删 git 中内容\n\t如果文件夹内还有文件要话，也都删掉，但是 .git 不能删！\n\trm -rf *\n\t#这个不会删隐藏文件，所以 .git 也不会被删，但是用 rm 命令还是自己仔细点好。。。\n\t```\n5. 把之前的 hexo 源文件，也就是我们写 blog 的那些都复制到当前文件夹下面\n\n\t```\n\tcp ../blog/* .\n\t#路径自己确定，也是没有复制隐藏文件\n\t```\n6. 加入 .gitignore\n\n\t```\n\t#.gitignore 内容\n\tpublic/\n\t.deploy/\n\t```\n7. 上传到 github\n\n\t```\n\tgit add .\n\tgit commit -m \"first commit\"\n\t#注意下面这个一定要加上 origin hexo\n\t#要不就 push 到 master 里去了\n\tgit push origin hexo\n\t```\n\n好啦，这样就都放到 branch 里去啦，可以安心啦~\n\n等明天试一下从别的电脑拉下来看看。\n\n## 拉下来\n\n```\ngit clone git@github.com:zwpaper/zwpaper.github.com.git -b hexo\n```\n\n## 可补充\n\n其实应该把默认分支改一下，以后 push 的时候直接 push 给 hexo","slug":"hello-world","published":1,"date":"2016-07-10T14:28:57.000Z","updated":"2016-03-16T13:24:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civjlvye5000mfnfd7thvtdo6"},{"title":"google C++ 代码风格","date":"2015-05-21T12:05:26.000Z","_content":"\n> 最近在写 C++ 程序，总感觉以前的 C 风格好像不太够用，突然想到了以前看的 Google C++ 风格，整理一下，以后就按 Google C++ 风格来!\n\n<!--more-->\n\n\n一个漂亮的代码风格，在看的时候就会很舒服，而且团队代码风格一致，更是一种享受！\n\n作为一个理智的 Google 脑残粉，选代码风格，肯定直接上 Google 了，更何况在 Google 要管理这么多代码，总结出来的代码风格肯定是毋庸置疑的。\n\n# 文章说明\n* 没有按照文章顺序\n* 常用部分先整理\n* 尽量看图，不说话\n\n\n# 内容\n\n## 命名约定\n\n> 写代码，写代码，肯定要先把这命名约定写好了！\n\n![](http://7xivq7.com1.z0.glb.clouddn.com/bloggoogle_cpp_naming.png)\n\n---\n\n# 待更新","source":"_posts/google-cpp-style.md","raw":"title: \"google C++ 代码风格\"\ndate: 2015-05-21 20:05:26\ntags:\n- tech\n---\n\n> 最近在写 C++ 程序，总感觉以前的 C 风格好像不太够用，突然想到了以前看的 Google C++ 风格，整理一下，以后就按 Google C++ 风格来!\n\n<!--more-->\n\n\n一个漂亮的代码风格，在看的时候就会很舒服，而且团队代码风格一致，更是一种享受！\n\n作为一个理智的 Google 脑残粉，选代码风格，肯定直接上 Google 了，更何况在 Google 要管理这么多代码，总结出来的代码风格肯定是毋庸置疑的。\n\n# 文章说明\n* 没有按照文章顺序\n* 常用部分先整理\n* 尽量看图，不说话\n\n\n# 内容\n\n## 命名约定\n\n> 写代码，写代码，肯定要先把这命名约定写好了！\n\n![](http://7xivq7.com1.z0.glb.clouddn.com/bloggoogle_cpp_naming.png)\n\n---\n\n# 待更新","slug":"google-cpp-style","published":1,"updated":"2016-03-16T13:24:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civjlvye7000nfnfdz75l8ir3"},{"title":"百度云加速下载v2.0","date":"2015-07-19T04:20:28.000Z","_content":"\n> 自从百度云成为视频下载神器，百度云下载就广为人知，又从百度云无耻限速，百度云又被骂得广为人知，如果你还在因限速而惆怅，刚好你又在用 Chrome/Safari，来这里，就对了。\n> 写了这个文章，结果还不少人问我怎么不能用，所以我又修改了一下，把教程做简单一点。\n\n<!--more-->\n\n\n# 准备工作：\n## 下载文件\n要用到的文件我都放在百度云了，直接下了就够了，强迫性也可以从下面主页下载\n\n[http://pan.baidu.com/s/1kTZPgEF]() 密码: 4966\n\n1. 脚本文件 aria2baiduyun，见百度云\n2. aria2 dmg文件，[https://github.com/tatsuhiro-t/aria2/releases]()\n3. 浏览器插件（二选一）：主页：[https://github.com/acgotaku/BaiduExporter/releases]()\n    * Chrome 插件 crx，--> [百度网盘助手](https://chrome.google.com/webstore/detail/baiduexporter/mjaenbjdjmgolhoafkohbhhbaiedbkno)\n    * Safari 插件 BaiduExporter.safariextz，没有链接。\n    \n# 流程\n## 安装 aria2\ndmg 文件，直接打开，双击安装即可。\n\n## 配置 aria2\n找到之前下载的脚本文件，是一个压缩包 **aria2baiduyun.tar.gz** 使用常见解压文件就可以解压，有可能要解压两次。\n\n解压后文件夹内有两个文件 **aria2.conf** 和 **aria2baiduyun.sh**\n\nMac 用户请打开 **Terminal**，也就是**终端**，打开程序菜单打 terminal 可以直接找到。\n\n把 **aria2baiduyun.sh** 文件拖到终端的窗口里面，再按一下**回车**\n\n输入下面命令后按**回车**。\n\n```\nsource ~/.bash_profile\n```\n\n## 安装浏览器插件\n\n### Chrome\n\n* Chrome 市场直接安装，给能上的朋友：[百度网盘助手](https://chrome.google.com/webstore/detail/baiduexporter/mjaenbjdjmgolhoafkohbhhbaiedbkno)\n* 不能打开 Chrome 市场的：\n> \n    * 从上面提供的百度云里下载 BaiduExporter.crx\n    * 打开 Chrome 菜单中的扩展程序\n    * 勾选右上角 **开发者模式** \n    * 把 BaiduExporter.crx 拖到扩展程序页面\n\n\n### Safari \n从上面提供的百度云里下载 BaiduExporter.safariextz\n\n安装方式来自苹果官网：[https://support.apple.com/kb/PH21488?locale=zh_CN&viewlocale=zh_CN]()\n\n> 安装来自开发者网站的扩展：下载，然后打开 .safariextz 文件。“Safari 扩展”偏好设置面板打开，并要求您确认扩展是否来自可信的来源。点按“信任”以安装扩展。\n\n\n# 使用\n准备工作完成，现在正式进入使用环节\n\n## 运行 Aria2\n这个操作**每次开机**时要执行一次：\n打开一个 Terminal 界面，输入以下命令并回车。\n\n```\naria2rpc\n```\n\n## 打开 YAAW\n这是一个网站，你应该好好保存网址：\n[http://binux.github.io/yaaw/demo/]()\n\n第一次打开时会报一个错误：\n\n```\nError: Internal server error\n```\n\n点右上角的扳手按钮，修改 `JSON-RPC Path` 内容，\n把 `http://binux.github.io:6800/jsonrpc` 改为 `http://127.0.0.1:6800/jsonrpc`\n\n保存，Save。\n\n## 百度云\n\n终于到激动人心的时候了，-> [点我打开百度云](http://pan.baidu.com/disk/home)\n\n看到上面的图标了吗？\n\n![](http://7xivq7.com1.z0.glb.clouddn.com/blogdownload.png)\n\n如果没有请重启一下 Chrome 或打开一个新 Chome 窗口，注意，不是新标签页。\n\n选中要下载的文件，鼠标放到图标上，点击 `Aria2 RPC`\n\n看看 YAAW 的页面？有没有惊喜？\n\n\n---\n再打个广告 -> [我是微博](http://weibo.com/zwpaper)\n\n\n\n===\n以下为旧文章\n---\ndate: 2015-07-19 12:20:28\n# 说明\n\n文章没有干货，只是自己碰巧找到两个好用的软件，效果惊人，所以总结一下自己的使用情况。\n\n因为要用到命令行，所以 Windows 没试过，Mac 和 Linux 用户应该是无压力的。\n\n\n# 效果\n\n扯别的都没用，先说一下我自己的速度情况。\n\n以下都是同一个网络环境：\n\n* Chrome 默认下载：200 - 300 KBps\n* Axel：下不鸟.........\n* Android ES 浏览器：500 - 1000 KBps\n* 本文所用，Aria2：1 - 3 MBps\n\n其中 Android 的 `ES 浏览器` 也很让我意外，基本可以稳定在 700 KBps。\n\n# 软件\n\n其实总共要用的软件就一个，`Aria2`，其它都是插件。\n\n## Aria2\n\n上面说到了要用命令行，就是因为 `Aria2` 是一个命令行软件，但是在用上相应插件后，完全不用担心自己不用全命令行。\n\n[Aria2主页](http://sourceforge.net/projects/aria2/)\n\n[Aria2 Github 主页](https://github.com/tatsuhiro-t/aria2)\n\n然你要是和我一样喜欢命令行那就更无压力啦！\n\n### 安装\n以下内容要用到命令行，所以\n\n* Mac 用户请打开 `Terminal`，也就是`终端`，打开程序菜单打 terminal 可以直接找到。\n* Linux 用户我觉得不用我说了吧？也是 terminal，看发行版，自己解决。\n\n\n#### Mac\nMac 推荐用 `Homebrew` 安装，只要一句\n\n```\nbrew install aria2\n```\n> `Homebrew` 的安装要 `Xcode` 环境，所以如果没有安装 `Homebrew` 还得先安装 `Xcode`。\n\n> 想安装 `Homebrew` 的用户请看这里 -> [我是Homebrew](http://brew.sh/index.html)\n\n> 其实就是下面的命令就可以安装（也是 `Terminal` 中输入）：\n\n```\nruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n```\n\n#### Linux\n发行版的差异真让我不知道应该怎么说明 Linux 安装。\n\n举一个粟子吧，Ubuntu\n\n```\nsudo apt-get install aria2\n```\n\n这个是基本，但不是关键，所以安装完就好了。\n\n#### 从源码安装\n如果以上方式你都觉得不合适，也可以从源码安装，但我已经忘记 Mac 默认会缺哪几个软件了，所以如果你真要这么干双不会的话，欢迎点左边的微博图标骚扰我。\n\n也可以点这里 -> [我是微博](http://weibo.com/zwpaper)\n\n### Aria2 配置\n\nAria2 是一个命令行软件，所以配置是写在文件里的，你要把下面的内容放到一个能找到的地方，例如 `~/Documents/aria2.conf`\n如果你不知道这是哪里，那你就打开 Mac 的 Finder，然后在侧边栏点 `文档（Documents）`，新建一个文件叫 `aria2.conf` 然后打开写下以下内容，注意修改两个地方：\n\n* `用户名` 改为自己的用户名，不知道是什么的，请在命令行中输入 `pwd` 然后回车。\n* 最后一行，如果是 `SSD` 即 `固态硬盘` 就不用改，如果是传统硬盘，就改成 `file-allocation=prealloc`\n\n```\n#允许rpc\nenable-rpc=true\n#允许非外部访问\nrpc-listen-all=true\n#RPC端口, 仅当默认端口被占用时修改\nrpc-listen-port=6800\n\n#最大同时下载数(任务数), 路由建议值: 3\nmax-concurrent-downloads=10\n#断点续传\ncontinue=true\n#同服务器连接数\nmax-connection-per-server=10\n#最小文件分片大小, 下载线程数上限取决于能分出多少片, 对于小文件重要\nmin-split-size=10M\n#单文件最大线程数, 路由建议值: 5\nsplit=10\n#下载速度限制\nmax-overall-download-limit=0\n#单文件速度限制\nmax-download-limit=0\n#上传速度限制\nmax-overall-upload-limit=0\n#单文件速度限制\nmax-upload-limit=0\n\n#文件保存路径, 默认为当前启动位置\ndir=/Users/用户名/Downloads\n\n#允许所有来源, web界面跨域权限需要\nrpc-allow-origin-all=true\n\n#文件预分配, 能有效降低文件碎片, 提高磁盘性能. 缺点是预分配时间较长\n#所需时间 none < falloc ? trunc << prealloc, falloc和trunc需要文件系统和内核支持\n# !!仅针对传统磁盘，SSD 降低文件碎片并不是什么好事。\nfile-allocation=none\n```\n\n### Aria2 命令快捷设置\n\n在命令行中输入以后命令，`用户名` 还是一样改成上文那个。\n\n```\necho \"alias aria2rpc='aria2c --conf-path=/Users/用户名/Documents/aria2.conf -D'\" >> ~/.bash_profile\n```\n然后\n\n```\nsource ~/.bash_profile\n```\n\n相信我，你已经接近完成了。\n\n---\n\n## 插件\n\n以下安装一个即可\n\n* Chrome 插件，[百度网盘助手](https://chrome.google.com/webstore/detail/baiduexporter/mjaenbjdjmgolhoafkohbhhbaiedbkno)\n* Firefox 插件，[百度网盘助手](https://raw.githubusercontent.com/acgotaku/BaiduExporter/master/firefox/baidu-exporter.xpi)\n\n这个其实都可以不安装，就是一个网页，下面是它的主页\n\n* [YAAW](http://binux.github.io/yaaw/)\n\n# 使用\n\n好了，现在装备齐全了，要怎么样才可以用的最舒服呢！\n\n从现在开始，以后只用按以下步骤就可以高速下载\n\n## 运行 Aria2\n\n打开一个 `Terminal` 界面，输入以下并回车。\n\n```\naria2rpc\n```\n好了，可以关闭 `Terminal`。\n每次开机后运行一次即可。\n\n## 打开 YAAW\n还记得我说的 YAAW 其实就是一个页面吗？打开它：\n\n[YAAW](http://binux.github.io/yaaw/demo/)\n\n这真是个应该有一个错误\n\n\tError: Internal server error\n\t\n点右上角的扳手按钮，修改 `JSON-RPC Path` 内容，\n把 `http://binux.github.io:6800/jsonrpc` 改为 `http://127.0.0.1:6800/jsonrpc`\n\n保存，Save。\n\n## 百度云\n\n终于到激动人心的时候了，-> [点我打开百度云](http://pan.baidu.com/disk/home)\n\n看到上面的图标了吗？\n\n![](http://7xivq7.com1.z0.glb.clouddn.com/blogdownload.png)\n\n如果没有请重启一下 Chrome 或打开一个新 Chome 窗口，注意，不是新标签页。\n\n选中要下载的文件，鼠标放到图标上，点击 `Aria2 RPC`\n\n看看 YAAW 的页面？有没有惊喜？\n\n# 后记\n\n这个真的是一劳多逸，如果有命令行经验的话，连劳都不算。\n\n后面没说 Linux 的东西了，不是我忘了，而是觉得大家应该都会。\n\n如果能帮上忙就点个赞吧！XD\n\n再打个广告 -> [我是微博](http://weibo.com/zwpaper)\n\n\n\n\n\n","source":"_posts/baiduyun-fastdown.md","raw":"title: \"百度云加速下载v2.0\"\ndate: 2015-07-19 12:20:28\ntags:\n- Software\n---\n\n> 自从百度云成为视频下载神器，百度云下载就广为人知，又从百度云无耻限速，百度云又被骂得广为人知，如果你还在因限速而惆怅，刚好你又在用 Chrome/Safari，来这里，就对了。\n> 写了这个文章，结果还不少人问我怎么不能用，所以我又修改了一下，把教程做简单一点。\n\n<!--more-->\n\n\n# 准备工作：\n## 下载文件\n要用到的文件我都放在百度云了，直接下了就够了，强迫性也可以从下面主页下载\n\n[http://pan.baidu.com/s/1kTZPgEF]() 密码: 4966\n\n1. 脚本文件 aria2baiduyun，见百度云\n2. aria2 dmg文件，[https://github.com/tatsuhiro-t/aria2/releases]()\n3. 浏览器插件（二选一）：主页：[https://github.com/acgotaku/BaiduExporter/releases]()\n    * Chrome 插件 crx，--> [百度网盘助手](https://chrome.google.com/webstore/detail/baiduexporter/mjaenbjdjmgolhoafkohbhhbaiedbkno)\n    * Safari 插件 BaiduExporter.safariextz，没有链接。\n    \n# 流程\n## 安装 aria2\ndmg 文件，直接打开，双击安装即可。\n\n## 配置 aria2\n找到之前下载的脚本文件，是一个压缩包 **aria2baiduyun.tar.gz** 使用常见解压文件就可以解压，有可能要解压两次。\n\n解压后文件夹内有两个文件 **aria2.conf** 和 **aria2baiduyun.sh**\n\nMac 用户请打开 **Terminal**，也就是**终端**，打开程序菜单打 terminal 可以直接找到。\n\n把 **aria2baiduyun.sh** 文件拖到终端的窗口里面，再按一下**回车**\n\n输入下面命令后按**回车**。\n\n```\nsource ~/.bash_profile\n```\n\n## 安装浏览器插件\n\n### Chrome\n\n* Chrome 市场直接安装，给能上的朋友：[百度网盘助手](https://chrome.google.com/webstore/detail/baiduexporter/mjaenbjdjmgolhoafkohbhhbaiedbkno)\n* 不能打开 Chrome 市场的：\n> \n    * 从上面提供的百度云里下载 BaiduExporter.crx\n    * 打开 Chrome 菜单中的扩展程序\n    * 勾选右上角 **开发者模式** \n    * 把 BaiduExporter.crx 拖到扩展程序页面\n\n\n### Safari \n从上面提供的百度云里下载 BaiduExporter.safariextz\n\n安装方式来自苹果官网：[https://support.apple.com/kb/PH21488?locale=zh_CN&viewlocale=zh_CN]()\n\n> 安装来自开发者网站的扩展：下载，然后打开 .safariextz 文件。“Safari 扩展”偏好设置面板打开，并要求您确认扩展是否来自可信的来源。点按“信任”以安装扩展。\n\n\n# 使用\n准备工作完成，现在正式进入使用环节\n\n## 运行 Aria2\n这个操作**每次开机**时要执行一次：\n打开一个 Terminal 界面，输入以下命令并回车。\n\n```\naria2rpc\n```\n\n## 打开 YAAW\n这是一个网站，你应该好好保存网址：\n[http://binux.github.io/yaaw/demo/]()\n\n第一次打开时会报一个错误：\n\n```\nError: Internal server error\n```\n\n点右上角的扳手按钮，修改 `JSON-RPC Path` 内容，\n把 `http://binux.github.io:6800/jsonrpc` 改为 `http://127.0.0.1:6800/jsonrpc`\n\n保存，Save。\n\n## 百度云\n\n终于到激动人心的时候了，-> [点我打开百度云](http://pan.baidu.com/disk/home)\n\n看到上面的图标了吗？\n\n![](http://7xivq7.com1.z0.glb.clouddn.com/blogdownload.png)\n\n如果没有请重启一下 Chrome 或打开一个新 Chome 窗口，注意，不是新标签页。\n\n选中要下载的文件，鼠标放到图标上，点击 `Aria2 RPC`\n\n看看 YAAW 的页面？有没有惊喜？\n\n\n---\n再打个广告 -> [我是微博](http://weibo.com/zwpaper)\n\n\n\n===\n以下为旧文章\n---\ndate: 2015-07-19 12:20:28\n# 说明\n\n文章没有干货，只是自己碰巧找到两个好用的软件，效果惊人，所以总结一下自己的使用情况。\n\n因为要用到命令行，所以 Windows 没试过，Mac 和 Linux 用户应该是无压力的。\n\n\n# 效果\n\n扯别的都没用，先说一下我自己的速度情况。\n\n以下都是同一个网络环境：\n\n* Chrome 默认下载：200 - 300 KBps\n* Axel：下不鸟.........\n* Android ES 浏览器：500 - 1000 KBps\n* 本文所用，Aria2：1 - 3 MBps\n\n其中 Android 的 `ES 浏览器` 也很让我意外，基本可以稳定在 700 KBps。\n\n# 软件\n\n其实总共要用的软件就一个，`Aria2`，其它都是插件。\n\n## Aria2\n\n上面说到了要用命令行，就是因为 `Aria2` 是一个命令行软件，但是在用上相应插件后，完全不用担心自己不用全命令行。\n\n[Aria2主页](http://sourceforge.net/projects/aria2/)\n\n[Aria2 Github 主页](https://github.com/tatsuhiro-t/aria2)\n\n然你要是和我一样喜欢命令行那就更无压力啦！\n\n### 安装\n以下内容要用到命令行，所以\n\n* Mac 用户请打开 `Terminal`，也就是`终端`，打开程序菜单打 terminal 可以直接找到。\n* Linux 用户我觉得不用我说了吧？也是 terminal，看发行版，自己解决。\n\n\n#### Mac\nMac 推荐用 `Homebrew` 安装，只要一句\n\n```\nbrew install aria2\n```\n> `Homebrew` 的安装要 `Xcode` 环境，所以如果没有安装 `Homebrew` 还得先安装 `Xcode`。\n\n> 想安装 `Homebrew` 的用户请看这里 -> [我是Homebrew](http://brew.sh/index.html)\n\n> 其实就是下面的命令就可以安装（也是 `Terminal` 中输入）：\n\n```\nruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n```\n\n#### Linux\n发行版的差异真让我不知道应该怎么说明 Linux 安装。\n\n举一个粟子吧，Ubuntu\n\n```\nsudo apt-get install aria2\n```\n\n这个是基本，但不是关键，所以安装完就好了。\n\n#### 从源码安装\n如果以上方式你都觉得不合适，也可以从源码安装，但我已经忘记 Mac 默认会缺哪几个软件了，所以如果你真要这么干双不会的话，欢迎点左边的微博图标骚扰我。\n\n也可以点这里 -> [我是微博](http://weibo.com/zwpaper)\n\n### Aria2 配置\n\nAria2 是一个命令行软件，所以配置是写在文件里的，你要把下面的内容放到一个能找到的地方，例如 `~/Documents/aria2.conf`\n如果你不知道这是哪里，那你就打开 Mac 的 Finder，然后在侧边栏点 `文档（Documents）`，新建一个文件叫 `aria2.conf` 然后打开写下以下内容，注意修改两个地方：\n\n* `用户名` 改为自己的用户名，不知道是什么的，请在命令行中输入 `pwd` 然后回车。\n* 最后一行，如果是 `SSD` 即 `固态硬盘` 就不用改，如果是传统硬盘，就改成 `file-allocation=prealloc`\n\n```\n#允许rpc\nenable-rpc=true\n#允许非外部访问\nrpc-listen-all=true\n#RPC端口, 仅当默认端口被占用时修改\nrpc-listen-port=6800\n\n#最大同时下载数(任务数), 路由建议值: 3\nmax-concurrent-downloads=10\n#断点续传\ncontinue=true\n#同服务器连接数\nmax-connection-per-server=10\n#最小文件分片大小, 下载线程数上限取决于能分出多少片, 对于小文件重要\nmin-split-size=10M\n#单文件最大线程数, 路由建议值: 5\nsplit=10\n#下载速度限制\nmax-overall-download-limit=0\n#单文件速度限制\nmax-download-limit=0\n#上传速度限制\nmax-overall-upload-limit=0\n#单文件速度限制\nmax-upload-limit=0\n\n#文件保存路径, 默认为当前启动位置\ndir=/Users/用户名/Downloads\n\n#允许所有来源, web界面跨域权限需要\nrpc-allow-origin-all=true\n\n#文件预分配, 能有效降低文件碎片, 提高磁盘性能. 缺点是预分配时间较长\n#所需时间 none < falloc ? trunc << prealloc, falloc和trunc需要文件系统和内核支持\n# !!仅针对传统磁盘，SSD 降低文件碎片并不是什么好事。\nfile-allocation=none\n```\n\n### Aria2 命令快捷设置\n\n在命令行中输入以后命令，`用户名` 还是一样改成上文那个。\n\n```\necho \"alias aria2rpc='aria2c --conf-path=/Users/用户名/Documents/aria2.conf -D'\" >> ~/.bash_profile\n```\n然后\n\n```\nsource ~/.bash_profile\n```\n\n相信我，你已经接近完成了。\n\n---\n\n## 插件\n\n以下安装一个即可\n\n* Chrome 插件，[百度网盘助手](https://chrome.google.com/webstore/detail/baiduexporter/mjaenbjdjmgolhoafkohbhhbaiedbkno)\n* Firefox 插件，[百度网盘助手](https://raw.githubusercontent.com/acgotaku/BaiduExporter/master/firefox/baidu-exporter.xpi)\n\n这个其实都可以不安装，就是一个网页，下面是它的主页\n\n* [YAAW](http://binux.github.io/yaaw/)\n\n# 使用\n\n好了，现在装备齐全了，要怎么样才可以用的最舒服呢！\n\n从现在开始，以后只用按以下步骤就可以高速下载\n\n## 运行 Aria2\n\n打开一个 `Terminal` 界面，输入以下并回车。\n\n```\naria2rpc\n```\n好了，可以关闭 `Terminal`。\n每次开机后运行一次即可。\n\n## 打开 YAAW\n还记得我说的 YAAW 其实就是一个页面吗？打开它：\n\n[YAAW](http://binux.github.io/yaaw/demo/)\n\n这真是个应该有一个错误\n\n\tError: Internal server error\n\t\n点右上角的扳手按钮，修改 `JSON-RPC Path` 内容，\n把 `http://binux.github.io:6800/jsonrpc` 改为 `http://127.0.0.1:6800/jsonrpc`\n\n保存，Save。\n\n## 百度云\n\n终于到激动人心的时候了，-> [点我打开百度云](http://pan.baidu.com/disk/home)\n\n看到上面的图标了吗？\n\n![](http://7xivq7.com1.z0.glb.clouddn.com/blogdownload.png)\n\n如果没有请重启一下 Chrome 或打开一个新 Chome 窗口，注意，不是新标签页。\n\n选中要下载的文件，鼠标放到图标上，点击 `Aria2 RPC`\n\n看看 YAAW 的页面？有没有惊喜？\n\n# 后记\n\n这个真的是一劳多逸，如果有命令行经验的话，连劳都不算。\n\n后面没说 Linux 的东西了，不是我忘了，而是觉得大家应该都会。\n\n如果能帮上忙就点个赞吧！XD\n\n再打个广告 -> [我是微博](http://weibo.com/zwpaper)\n\n\n\n\n\n","slug":"baiduyun-fastdown","published":1,"updated":"2016-03-16T13:24:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civjlvye9000pfnfdvjr04rba"},{"title":"Unique binary search tree in LeetCode","date":"2015-04-02T16:45:44.000Z","_content":"\n> 最近时不时地刷一下 LeetCode，突然做了这么一道 Unique binary search tree，一看时间，尼码哥也有自豪的时候啦！快拿出来晒一晒~\n\n<!--more-->\n#Unique Binary Search Trees\n\n[https://leetcode.com/problems/unique-binary-search-trees/]()\n\n给一个数字，找出来能种多少棵搜索二叉树。\n\n##思路\n\n* 第一眼看到，卧槽，这什么奇皅题，上网找二叉搜索树是怎么建立的，别吐槽，都忘光了。。。\n* 看了一下，没啥帮助啊，突然看到，为啥要给个3做例子呢？于是开始找规律，这货不就是节点都放左边，然后一个个挪到右边去么？\n* 有规律了，再看看，没错了，就是这么挪，然后每挪一次，算出两边子树的个数，相乘，得到一种情况，再挪过去一个，再算，一直到一边的子树挪完了。\n* 应该可以做了，来一个数字，开始递归算各个子树的值，再相乘相加\n* 虽然之前做题的时候也用递归了，但是这个递归得有点狠啊，时间复杂度上不太好吧？想想有没有别的方法\n\n\n## a\n\n递归太狠，要改成递推！\n\n啊！这不就是斐波那契数列么！\n\n斐波那契数列有个递推的方法来着。。。\n\n## aha Algrithm\n\n19 个测试，1ms 的时间，C++ 比很多用 C 还快了~\n\nTalk is cheap, show you the code!\n\n\n```\nclass Solution {\npublic:\nint numTrees(int n) {\n\tif( n <= 2 )\n\t\treturn n;\n\n\tint numbers[n+1];\n\tnumbers[0] = 1;\n\tnumbers[1] = 1;\n\n\tint i,j;\n\tfor( i = 2; i <= n; i++)\n\t\tnumbers[i] = 0;\n\tfor( i = 2; i <= n; i++ )\n\t{\n\n\t\tfor( j = i - 1 ; j >=0; j-- )\n\t\t{\n\t\t\tnumbers[i] += numbers[j] * numbers[i - j - 1];\n\t\t}\n\t}\n    return numbers[n];\n}\n};\n```","source":"_posts/Unique-binary-search-tree.md","raw":"title: \"Unique binary search tree in LeetCode\"\ndate: 2015-04-03 00:45:44\ntags: \n- tech\n- leetcode\n---\n\n> 最近时不时地刷一下 LeetCode，突然做了这么一道 Unique binary search tree，一看时间，尼码哥也有自豪的时候啦！快拿出来晒一晒~\n\n<!--more-->\n#Unique Binary Search Trees\n\n[https://leetcode.com/problems/unique-binary-search-trees/]()\n\n给一个数字，找出来能种多少棵搜索二叉树。\n\n##思路\n\n* 第一眼看到，卧槽，这什么奇皅题，上网找二叉搜索树是怎么建立的，别吐槽，都忘光了。。。\n* 看了一下，没啥帮助啊，突然看到，为啥要给个3做例子呢？于是开始找规律，这货不就是节点都放左边，然后一个个挪到右边去么？\n* 有规律了，再看看，没错了，就是这么挪，然后每挪一次，算出两边子树的个数，相乘，得到一种情况，再挪过去一个，再算，一直到一边的子树挪完了。\n* 应该可以做了，来一个数字，开始递归算各个子树的值，再相乘相加\n* 虽然之前做题的时候也用递归了，但是这个递归得有点狠啊，时间复杂度上不太好吧？想想有没有别的方法\n\n\n## a\n\n递归太狠，要改成递推！\n\n啊！这不就是斐波那契数列么！\n\n斐波那契数列有个递推的方法来着。。。\n\n## aha Algrithm\n\n19 个测试，1ms 的时间，C++ 比很多用 C 还快了~\n\nTalk is cheap, show you the code!\n\n\n```\nclass Solution {\npublic:\nint numTrees(int n) {\n\tif( n <= 2 )\n\t\treturn n;\n\n\tint numbers[n+1];\n\tnumbers[0] = 1;\n\tnumbers[1] = 1;\n\n\tint i,j;\n\tfor( i = 2; i <= n; i++)\n\t\tnumbers[i] = 0;\n\tfor( i = 2; i <= n; i++ )\n\t{\n\n\t\tfor( j = i - 1 ; j >=0; j-- )\n\t\t{\n\t\t\tnumbers[i] += numbers[j] * numbers[i - j - 1];\n\t\t}\n\t}\n    return numbers[n];\n}\n};\n```","slug":"Unique-binary-search-tree","published":1,"updated":"2016-03-16T13:24:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civjlvyeb000rfnfdodl9bbpr"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"civjlvybn0000fnfdrhg200kp","tag_id":"civjlvybv0001fnfdqlegd61j","_id":"civjlvyby0003fnfdvhyp44v0"},{"post_id":"civjlvybn0000fnfdrhg200kp","tag_id":"civjlvyby0002fnfdckzcr7xb","_id":"civjlvyby0004fnfdmmtvv9t2"},{"post_id":"civjlvydb0005fnfdw86bh93q","tag_id":"civjlvydc0006fnfdcn3gy14f","_id":"civjlvydc0007fnfdnq8b2vta"},{"post_id":"civjlvydk0008fnfdv55gk0bl","tag_id":"civjlvybv0001fnfdqlegd61j","_id":"civjlvydn0009fnfdx2f2qduf"},{"post_id":"civjlvydk0008fnfdv55gk0bl","tag_id":"civjlvyby0002fnfdckzcr7xb","_id":"civjlvydn000afnfdd5jdwp6i"},{"post_id":"civjlvydx000bfnfd7osljmlg","tag_id":"civjlvybv0001fnfdqlegd61j","_id":"civjlvydy000dfnfdw75dyzox"},{"post_id":"civjlvydx000bfnfd7osljmlg","tag_id":"civjlvydx000cfnfdqmtdzxzg","_id":"civjlvydy000efnfd7s4q8dpt"},{"post_id":"civjlvydz000ffnfdnpgc7ar2","tag_id":"civjlvyby0002fnfdckzcr7xb","_id":"civjlvye0000gfnfd945v8t91"},{"post_id":"civjlvydz000ffnfdnpgc7ar2","tag_id":"civjlvybv0001fnfdqlegd61j","_id":"civjlvye0000hfnfdcgvy0ssx"},{"post_id":"civjlvye2000ifnfd3bjsyelk","tag_id":"civjlvybv0001fnfdqlegd61j","_id":"civjlvye3000kfnfde4blsey9"},{"post_id":"civjlvye2000ifnfd3bjsyelk","tag_id":"civjlvye3000jfnfdii27btci","_id":"civjlvye3000lfnfdkvrc1hi3"},{"post_id":"civjlvye7000nfnfdz75l8ir3","tag_id":"civjlvybv0001fnfdqlegd61j","_id":"civjlvye8000ofnfd3v020wb5"},{"post_id":"civjlvye9000pfnfdvjr04rba","tag_id":"civjlvydx000cfnfdqmtdzxzg","_id":"civjlvyea000qfnfd1e5bmiyl"},{"post_id":"civjlvyeb000rfnfdodl9bbpr","tag_id":"civjlvybv0001fnfdqlegd61j","_id":"civjlvyee000sfnfdh2cotp9h"},{"post_id":"civjlvyeb000rfnfdodl9bbpr","tag_id":"civjlvyby0002fnfdckzcr7xb","_id":"civjlvyee000tfnfdp0qszdy9"}],"Tag":[{"name":"tech","_id":"civjlvybv0001fnfdqlegd61j"},{"name":"leetcode","_id":"civjlvyby0002fnfdckzcr7xb"},{"name":"fun","_id":"civjlvydc0006fnfdcn3gy14f"},{"name":"Software","_id":"civjlvydx000cfnfdqmtdzxzg"},{"name":"C","_id":"civjlvye3000jfnfdii27btci"}]}}