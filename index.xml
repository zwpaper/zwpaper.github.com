<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>kWeizh</title>
    <link>https://page.codespaper.com/</link>
    <description>Recent content on kWeizh</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 07 Dec 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://page.codespaper.com/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>收到第一次的周期开源赞助</title>
      <link>https://page.codespaper.com/2023/2023-first-sponsor-lsd/</link>
      <pubDate>Thu, 07 Dec 2023 00:00:00 +0000</pubDate>
      
      <guid>https://page.codespaper.com/2023/2023-first-sponsor-lsd/</guid>
      <description>&lt;h1 id=&#34;收到第一次的周期开源赞助&#34;&gt;收到第一次的周期开源赞助&lt;/h1&gt;
&lt;p&gt;最近收到了人生的第一个开源赞助，突然有一种被认可的感觉，激动的心情让我想写一点东西分享一下我的快乐。&lt;/p&gt;
&lt;p&gt;首先肯定要大力感谢 &lt;a href=&#34;https://www.warp.dev/?utm_source=github&amp;amp;utm_medium=referral&amp;amp;utm_campaign=lsd_20231001&#34;&gt;Warp.dev 对我和 LSD 开源项目的支持&lt;/a&gt;！&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.warp.dev/?utm_source=github&amp;amp;utm_medium=referral&amp;amp;utm_campaign=lsd_20231001&#34;&gt;Warp.dev&lt;/a&gt; 是一个 Rust 实现的现代化 Terminal，目前我也在尝试用它替换 iTerm2，不得不说还是挺特别的，尤其每一个命令就是一个 Block，支持团队协作和 AI 建议等现代化功能，起码是在众多 Terminal 里，算是做出自己的特色了。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>2020 年终总结，2021 新年展望</title>
      <link>https://page.codespaper.com/2021/2020-2021/</link>
      <pubDate>Tue, 16 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://page.codespaper.com/2021/2020-2021/</guid>
      <description>&lt;p&gt;2020 年碰到了新冠疫情，是大环境最差的一年，但是宅在家里，却看到了更多，做到了更多，
放眼看，今年科技圈又把眼光看向了太空，
嫦娥五号登月带回样本，猎鹰九号载人升空，SN8 虽然落地爆炸，但是跳跃测试基本完美完成，
小时候成为科学家的梦想又开始在内心涌动起来（Doge），
回看身边科技圈， &lt;code&gt;Apple Silicon&lt;/code&gt; 闪亮登场， &lt;code&gt;苹果&lt;/code&gt; 市值 2 万亿， &lt;code&gt;Tesla&lt;/code&gt;, &lt;code&gt;美团&lt;/code&gt;, &lt;code&gt;小米&lt;/code&gt; 市值猛涨，
在拖延症 2020 年总结时， &lt;code&gt;Golang&lt;/code&gt; 泛型还在农历新年迎来了好消息。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>macOS GUI Emacs 使用 GPG 给 Git Commit 签名</title>
      <link>https://page.codespaper.com/2020/mac-emacs-gui-gpg-sign-commit/</link>
      <pubDate>Sat, 21 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://page.codespaper.com/2020/mac-emacs-gui-gpg-sign-commit/</guid>
      <description>&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;
&lt;p&gt;使用 GPG 给 Commit 签名，网上已经有很多教程，但是在 Emacs 使用 &lt;a href=&#34;https://magit.vc/&#34;&gt;Magit&lt;/a&gt; 作为 Git 客户端时，
还是碰到了几个问题。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>儿童疫苗攻略</title>
      <link>https://page.codespaper.com/2020/kid-vaccine/</link>
      <pubDate>Tue, 28 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://page.codespaper.com/2020/kid-vaccine/</guid>
      <description>&lt;h2 id=&#34;选择原则&#34;&gt;选择原则&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;既有免费又有自费的 5 种疫苗，流脑疫苗选自费，其他选免费疫苗；&lt;/li&gt;
&lt;li&gt;发病率高、发病后病情严重的先打；&lt;/li&gt;
&lt;li&gt;自费疫苗尽早接种，可以和免费疫苗同时接种在不同部位。&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Kubernetes Scheduler 源码阅读</title>
      <link>https://page.codespaper.com/kube-scheduler-source-code/</link>
      <pubDate>Fri, 20 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://page.codespaper.com/kube-scheduler-source-code/</guid>
      <description>Config https://sourcegraph.com/github.com/kubernetes/kubernetes@v1.15.9/-/blob/pkg/scheduler/api/v1/types.go#L31
{ &amp;#34;kind&amp;#34; : &amp;#34;Policy&amp;#34;, &amp;#34;apiVersion&amp;#34; : &amp;#34;v1&amp;#34;, &amp;#34;extenders&amp;#34; : [ { &amp;#34;urlPrefix&amp;#34;: &amp;#34;http://127.0.0.1:3456/scheduler&amp;#34;, &amp;#34;filterVerb&amp;#34;: &amp;#34;predicates&amp;#34;, &amp;#34;enableHttps&amp;#34;: false, &amp;#34;nodeCacheCapable&amp;#34;: false, &amp;#34;managedResources&amp;#34;: [{ &amp;#34;name&amp;#34;: &amp;#34;tencent.com/vcuda-core&amp;#34;, &amp;#34;ignoredByScheduler&amp;#34;: false }, { &amp;#34;name&amp;#34;: &amp;#34;tencent.com/vcuda-memory&amp;#34;, &amp;#34;ignoredByScheduler&amp;#34;: false }] } ], &amp;#34;hardPodAffinitySymmetricWeight&amp;#34; : 10, &amp;#34;alwaysCheckAllPredicates&amp;#34; : false } Scheduling 谁调用 MakeNextPod, 然后调 schedulerOne? scheduling_queue.go:815] About to try and schedule pod default/engine-static-feature-db-worker-p4-3-0 https://sourcegraph.com/github.com/kubernetes/kubernetes@v1.15.9/-/blob/pkg/scheduler/internal/queue/scheduling_queue.go#L811
scheduler.go:456] Attempting to schedule pod: default/engine-static-feature-db-worker-p4-3-0 https://sourcegraph.com/github.com/kubernetes/kubernetes@v1.15.9/-/blob/pkg/scheduler/scheduler.go#L442
sched.schedule https://sourcegraph.com/github.com/kubernetes/kubernetes@v1.15.9/-/blob/pkg/scheduler/scheduler.go#L283
sched.config.Algorithm.Schedule(pod, sched.config.NodeLister)
scheduler.algorithm = NewGenericScheduler -&amp;gt; genericScheduler sched.</description>
    </item>
    
    <item>
      <title>从 NextCloud 替换为 Seafile</title>
      <link>https://page.codespaper.com/2020/from-nextcloud-to-seafile/</link>
      <pubDate>Sun, 08 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://page.codespaper.com/2020/from-nextcloud-to-seafile/</guid>
      <description>&lt;p&gt;之前自己组装了一台 NAS，用作私有云，解决大容量网盘，自己跑的一些小应用的问题，还计划作为软路由。
当时对网盘的选择是 NextCloud，最主要的原因就是这是有名气的 Self Hosted 网盘里，最开源的选项，
而这周末，我还是决定更换到 Seafile。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Golang 1.14 发布，抢占式调度优化</title>
      <link>https://page.codespaper.com/2020/go14-preemptible/</link>
      <pubDate>Sun, 01 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://page.codespaper.com/2020/go14-preemptible/</guid>
      <description>&lt;p&gt;&lt;code&gt;Golang&lt;/code&gt; 1.14 在 2020-02-25 正式发布，看了一下 Release Notes，发现有两个点比较有意思：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;调度器抢占优化，不再需要函数调用作为抢占点&lt;/li&gt;
&lt;li&gt;Timer 更高效&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这篇文章主要是聊聊调度器这部分。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>2019 年终总结，2020 新年展望</title>
      <link>https://page.codespaper.com/2020/2019-2020/</link>
      <pubDate>Fri, 31 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://page.codespaper.com/2020/2019-2020/</guid>
      <description>&lt;p&gt;2018 年底从一个创业公司，换到了另一个创业公司，今年算是全新的一年。&lt;/p&gt;
&lt;p&gt;年度关键词： &lt;code&gt;水流不腐&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Kubernetes 服务名解析原理</title>
      <link>https://page.codespaper.com/2019/k8s-dns-resolve/</link>
      <pubDate>Fri, 30 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://page.codespaper.com/2019/k8s-dns-resolve/</guid>
      <description>场景 在 Kubernetes 中，我们经常会有直接使用 Service 的名字访问对应 Service 地址的场景。
举个栗子，我们建一个 Service，名字叫 demo-svc ，对应的 ClusterIP 为 10.0.171.239 ，端口为 80 。 那么，我们在访问同一个 Namespace 下的这个 Service 时，我们一般会通过一下几种方式之一访问：
10.0.171.239:80 demo-svc:80 demo-svc.namespace-name.svc.cluster.local:80 注意：如果时要访问不同 Namespace 下，或者集群外部 Service，可以通过 ExternalName 类型的 Service 实现， 但是这是另一个话题，就不展开了。
通过 IP 地址访问的情况自然是不需要解释，通过 Service 名字访问的方式也很自然能想到时通过 DNS 解析实现。
但是， demo-svc 和 demo-svc.namespace-name.svc.cluster.local 之间的区别和关系是什么呢？
原理解析 DNS 查看 Pod 内的 /etc/resolve.conf ，能看到一下内容：
nameserver 10.0.0.10 search namespace-name.svc.cluster.local svc.cluster.local cluster.local options ndots:5 其中：
10.0.0.10 时 CoreDNS 的 Service 的 IP 地址，我们的请求都会发送到 CoreDNS 解析。 search 时 Kubernetes 加上的，顾名思义，解析 DNS 的时候会 查找 后面对应的这几个后缀。 options ndots:5 这个有意思，当请求的域名里，显式出现少于 5 个 点 时，才补上 search 的后缀。 值得注意的时 options ndots:5 ，显式出现少于 5 个 点 是什么意思呢？</description>
    </item>
    
    <item>
      <title>用 Stack 管理多个 GHC 版本</title>
      <link>https://page.codespaper.com/2019/stack-multi-ghc/</link>
      <pubDate>Sat, 17 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://page.codespaper.com/2019/stack-multi-ghc/</guid>
      <description>&lt;p&gt;使用 Haskell 碰到 GHC 版本的问题，但是搜了一下，感觉说的文章不多，
可能是国内用 Haskell 的人比较少，或者用的人都比较厉害。&lt;/p&gt;
&lt;p&gt;Haskell 作为函数式编程的代表性语言，感觉还是很值得学习，也希望能有更多的中文文章，
让像我这样希望入门的人，能够更容易的上手。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>开始用 Beancount 实践复式记账（一）：初始化</title>
      <link>https://page.codespaper.com/2019/beancount/</link>
      <pubDate>Sat, 10 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://page.codespaper.com/2019/beancount/</guid>
      <description>&lt;p&gt;第一次了解到复式记账是 Emacs 的 &lt;code&gt;Ledger mode&lt;/code&gt; ，但是还挺复杂的，就放弃了。
后来 Byvoid 的&lt;a href=&#34;https://www.byvoid.com/zht/blog/beancount-bookkeeping-1&#34;&gt;Beancount 复式记账（一）：为什么&lt;/a&gt;里提到了 &lt;code&gt;Beancount&lt;/code&gt; ，感觉比较值得一试。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>dnsmasq &#43; Cloudflare DoH 自建 DNS</title>
      <link>https://page.codespaper.com/2019/dnsmasq-cloudflare-doh/</link>
      <pubDate>Sun, 30 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://page.codespaper.com/2019/dnsmasq-cloudflare-doh/</guid>
      <description>&lt;p&gt;有时候方案一些网站的时候，会由于 DNS 解析出问题，即使网络情况很好，也会出现无法访问的情况，
而最近很流行的 DNS over HTTPS 更是十分的稳定安全，所以，通过自建 DNS，可以精确的得到解析结果。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>从 Slurm &#43; Lustre 到 Kubeflow &#43; Ceph (0)，简介和容器中使用显卡</title>
      <link>https://page.codespaper.com/2019/slurm-lustre-to-kubeflow-ceph/</link>
      <pubDate>Sat, 15 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://page.codespaper.com/2019/slurm-lustre-to-kubeflow-ceph/</guid>
      <description>&lt;p&gt;传统的高性能计算集群一般都习惯性地使用 &lt;code&gt;Slurm&lt;/code&gt; + &lt;code&gt;Lustre&lt;/code&gt; 的方案作为任务调度和存储，
然而，随着容器的发展，互联网业务的部署已经越来越多地开始了容器化，
而 &lt;code&gt;Kubernetes&lt;/code&gt; 也成为了容器编排的事实标准。&lt;/p&gt;
&lt;p&gt;而且，对比容器化的简洁， &lt;code&gt;Slurm&lt;/code&gt; 和 &lt;code&gt;Lustre&lt;/code&gt; 复杂的配置，让人头疼的运維压力，
也让作为互联网的最前沿之一的机器学习，也开始了容器化探索。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>作为新手，为什么我选 Typescript</title>
      <link>https://page.codespaper.com/2019/js-to-ts-for-newbie/</link>
      <pubDate>Sun, 09 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://page.codespaper.com/2019/js-to-ts-for-newbie/</guid>
      <description>&lt;p&gt;最近尝试着使用 Taro 写一个微信小程序，&lt;a href=&#34;https://taro.jd.com/&#34;&gt;Taro&lt;/a&gt; 是&lt;a href=&#34;https://aotu.io/&#34;&gt;京东凹凸实验室&lt;/a&gt;开发的一款使用 &lt;a href=&#34;https://reactjs.org/&#34;&gt;React&lt;/a&gt; 语法多端统一开发解决方案，
其实也就是使用 React 语法编写一次，使用不同的编译方式编译出 BATT 各家小程序，React Native 程序。&lt;/p&gt;
&lt;p&gt;Taro 在对各端支持上还有一些差异，在开发的时候有一些细节需要关注。
而目前小程序基本只有微信小程序比较热门，而且腾讯推出云开发，可以一定程度省去后端的工作量，
所以目前入门基本只关注微信小程序就足够了。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>用 Rust 从零开始写一个 Slack 机器人 (0)</title>
      <link>https://page.codespaper.com/slack-bot-in-rust/</link>
      <pubDate>Sat, 01 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://page.codespaper.com/slack-bot-in-rust/</guid>
      <description>简介 Slack 机器人是一个服务端程序，可以通过 Slack 和他进行交互，完成期望的一些动作。
如果你不知道什么是 Slack，可以先了解一下：
About Slack
因为我最近正在学习 Rust，所以本文会使用 Rust 从零开发一个 Slack 机器人，并记录下我碰到的问题， 最终希望能够做出一个真正能够解决一些实用问题的机器人。
本篇为初章，包含一些简介和 Slack API 的认证的开发。
准备 开发 Slack 机器人需要有准备：
Slack 帐号，并申请开通 Bot user 带有公网帐号的服务器 如果使用实时信息 API 可以没有公网 IP。
Slack API Slack 提供了三种 API：
Web hook 向 Slack 服务器发送 web 请求，从而发送信息到 Slack 上 Event API 订阅具体事件（Event）并由 Slack 发送到指定服务器，由服务器商决定做出什么反应 RTM API 实时信息 API，通过 WebSocket 连接到 Slack，连接后，会收到所有 Slack 的信息 考虑到 HTTP 服务端程序更常用，也足够满足机器人的要求，所以我们使用 Event API。
关于几种 API 的区别，可以看一下 这篇文章</description>
    </item>
    
    <item>
      <title>为什么我觉得 Golang 更好</title>
      <link>https://page.codespaper.com/2019/why-golang/</link>
      <pubDate>Sun, 10 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://page.codespaper.com/2019/why-golang/</guid>
      <description>&lt;p&gt;最近看到 Rob Pike 在 2012 年写的一篇文章，&lt;a href=&#34;https://commandcenter.blogspot.com/2012/06/less-is-exponentially-more.html&#34;&gt;Less is exponentially more&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果你不知道 Rob Pike 是谁：&lt;a href=&#34;https://zh.wikipedia.org/wiki/%25E7%25BE%2585%25E5%258B%2583%25C2%25B7%25E6%25B4%25BE%25E5%2585%258B&#34;&gt;Rob Pike&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;或者用一句话介绍，Golang 作者之一&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;结合之前看到对于 Golang 编程思想的讨论，对这篇文章真是相见恨晚&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用 GPG 在 Emacs 中加密 Org Mode 笔记文件</title>
      <link>https://page.codespaper.com/2019/gpg-encrypt-org/</link>
      <pubDate>Sat, 09 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://page.codespaper.com/2019/gpg-encrypt-org/</guid>
      <description>&lt;p&gt;Org Mode 作为主要 GTD 和笔记软件，需要使用网盘来同步信息，虽然 Dropbox 名声十分良好，
但是有一些敏感信息，还是认为谁都不值得信任。&lt;/p&gt;
&lt;p&gt;所以需要使用 GPG 加密后再传到 Dropbox，而 Emacs 中， &lt;code&gt;EasyPG Assistant&lt;/code&gt; 可以很方便地加解密。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Sessions control for hammerspoon</title>
      <link>https://page.codespaper.com/2015/sessions-control-hammerspoon-doc/</link>
      <pubDate>Sat, 11 Jul 2015 23:48:27 +0800</pubDate>
      
      <guid>https://page.codespaper.com/2015/sessions-control-hammerspoon-doc/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Sessions control 是一套基于 hammerspoon(Mac) 的脚本程序。可以通过快捷键把 Mac 中的各个窗口归类，并快速的在各个分类中切换，包括全屏的窗口也会自己切换。&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
  </channel>
</rss>
